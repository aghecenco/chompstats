[{"user": {"following_url": "https://api.github.com/users/dgreid/following{/other_user}", "url": "https://api.github.com/users/dgreid", "site_admin": false, "gists_url": "https://api.github.com/users/dgreid/gists{/gist_id}", "node_id": "MDQ6VXNlcjExMzM3OA==", "starred_url": "https://api.github.com/users/dgreid/starred{/owner}{/repo}", "gravatar_id": "", "id": 113378, "events_url": "https://api.github.com/users/dgreid/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/113378?v=4", "login": "dgreid", "repos_url": "https://api.github.com/users/dgreid/repos", "subscriptions_url": "https://api.github.com/users/dgreid/subscriptions", "followers_url": "https://api.github.com/users/dgreid/followers", "html_url": "https://github.com/dgreid", "received_events_url": "https://api.github.com/users/dgreid/received_events", "type": "User", "organizations_url": "https://api.github.com/users/dgreid/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "I think so. crosvm has set_user_memory_region marked as unsafe. ", "updated_at": "2019-05-08T19:04:37Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/490611270", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-490611270", "created_at": "2019-05-08T19:04:37Z", "id": 490611270, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDYxMTI3MA=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "I'll update it to unsafe. Thanks!", "updated_at": "2019-05-09T06:57:06Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/490768520", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-490768520", "created_at": "2019-05-09T06:57:06Z", "id": 490768520, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MDc2ODUyMA=="}, {"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "The KVM code will check if the userspace address we pass it to is valid (alignment checks and `access_ok()`). I know we should not rely on an implicit knowledge about the underlying code, but I don't think marking this one as `unsafe` is helping us.\r\ncc @bonzini @alexandruag  ", "updated_at": "2019-06-03T16:32:46Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498330980", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498330980", "created_at": "2019-06-03T16:32:46Z", "id": 498330980, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODMzMDk4MA=="}, {"user": {"following_url": "https://api.github.com/users/dgreid/following{/other_user}", "url": "https://api.github.com/users/dgreid", "site_admin": false, "gists_url": "https://api.github.com/users/dgreid/gists{/gist_id}", "node_id": "MDQ6VXNlcjExMzM3OA==", "starred_url": "https://api.github.com/users/dgreid/starred{/owner}{/repo}", "gravatar_id": "", "id": 113378, "events_url": "https://api.github.com/users/dgreid/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/113378?v=4", "login": "dgreid", "repos_url": "https://api.github.com/users/dgreid/repos", "subscriptions_url": "https://api.github.com/users/dgreid/subscriptions", "followers_url": "https://api.github.com/users/dgreid/followers", "html_url": "https://github.com/dgreid", "received_events_url": "https://api.github.com/users/dgreid/received_events", "type": "User", "organizations_url": "https://api.github.com/users/dgreid/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "> The KVM code will check if the userspace address we pass it to is valid (alignment checks and `access_ok()`). I know we should not rely on an implicit knowledge about the underlying code, but I don't think marking this one as `unsafe` is helping us.\r\n\r\nThe danger isn't in giving an invalid region to the kernel. What if a valid region that overlaps other memory is passed in? I don't think we can trust the kernel to fail when we use this to create an alias that can't be reasoned about by the compiler.  This is unsafe because the caller must make those guarantees, we remove the compiler's ability to do so when the memory is shared with the guest.\r\n\r\n", "updated_at": "2019-06-03T16:47:52Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498336422", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498336422", "created_at": "2019-06-03T16:47:52Z", "id": 498336422, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODMzNjQyMg=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "What @dgreid said, plus the lifetime of the MmapRegion is not guaranteed to be as long as the time that the kernel holds it.", "updated_at": "2019-06-03T17:12:48Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498345257", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498345257", "created_at": "2019-06-03T17:12:48Z", "id": 498345257, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODM0NTI1Nw=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "@dgreid @bonzini thanks for the explanation. I was confused about it because I was looking at the [documentation](https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#unsafe-superpowers) for marking functions as unsafe and it didn't seem like passing raw pointers fits any category described in there. This was the initial reason for marking it as unsafe.\r\n\r\nFor future reference: are there some guidelines anywhere around when to mark a function as unsafe besides what it already stated in the Rust documentation? ", "updated_at": "2019-06-04T08:28:40Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498574886", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498574886", "created_at": "2019-06-04T08:28:40Z", "id": 498574886, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODU3NDg4Ng=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "@andreeaflorescu As you know, in Rust the unsafe part of pointers is dereferencing it, that is creating a pointer is safe but dereferencing it is not. Now I can see your confusion because usually you have two choices for dereferencing a pointer: either you can ensure that the method that does the dereference is safe, and then you just use an unsafe block, or you mark the method containing the dereference as unsafe.\r\n\r\nThe problem is that in this case the dereference doesn't happen in Rust, it happens in the kernel, so the two choices have to be changed slightly. If you can ensure that all kernel accesses to the pointer will happen safely, you can use an unsafe block. For example, you could do that by passing `Arc<MmapRegion>` to `set_user_memory_region` and storing the reference until the memory region is removed from the KVM memory map[1]. If you cannot ensure that all kernel accesses to the pointer will happen safely (typically meaning that you have no control over the **lifetime** of the kernel's reference to the pointer), then you have to mark the method unsafe.\r\n\r\n[1] I'm not suggesting to do this. In the rust-vmm design, managing reference counts to the `MmapRegion`s would be the task of the `GuestMemory` implementation.", "updated_at": "2019-06-04T09:14:15Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498590741", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498590741", "created_at": "2019-06-04T09:14:15Z", "id": 498590741, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODU5MDc0MQ=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "This is unfortunately not written anywhere, not even in the [Nomicon's section on FFI](https://doc.rust-lang.org/nomicon/ffi.html). I'll open an issue.", "updated_at": "2019-06-04T09:16:20Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498591422", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498591422", "created_at": "2019-06-04T09:16:20Z", "id": 498591422, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODU5MTQyMg=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/38", "body": "@bonzini @dgreid I created a new PR https://github.com/rust-vmm/kvm-ioctls/pull/46 and added a Safety section to the function documentation. Can you take a look?", "updated_at": "2019-06-04T12:26:35Z", "url": "https://api.github.com/repos/rust-vmm/kvm-ioctls/issues/comments/498649707", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-ioctls/issues/38#issuecomment-498649707", "created_at": "2019-06-04T12:26:35Z", "id": 498649707, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5ODY0OTcwNw=="}]