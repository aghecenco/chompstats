[{"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/50", "body": "Bringing over our discussion from https://github.com/rust-vmm/vmm-vcpu/issues/5 so that we can resume it with this audience:\r\n\r\n***\r\n**jennymankin commented 5 hours ago**\r\n\r\nSome thoughts:\r\n\r\n- I like the VMM and the VM traits you've outlined and the functionality they provide. I see these working nicely with the VCPU trait and providing a nice hierarchy of functionality and solid building blocks for building hypervisors.\r\n\r\n- I see dynamic dispatch being utilized in the create functions of Hypervisor and Vm. I think these might be better served using static dispatch and trait generics, rather than \"box\"ing the references to the other trait implementations. The overhead introduced by dynamic dispatch and the virtual functions may not be necessary, and as you said, there will only be one type or implementation of hypervisor <-> VM <-> VCPU (as built at the highest level through conditional compilation) for each scenario. A statically-dispatched return value of a Trait generic can be achieved with the impl Trait syntax. For example:\r\n\r\n```\r\npub trait Vcpu { \r\n    // \u2026\r\n}\r\npub trait Vm {\r\n    pub fn create_vcpu(&self, id: u8) -> impl Vcpu;\r\n    // \u2026\r\n}\r\n```\r\n\r\n- I think each of these traits would be better implemented as a separate crate, so that each piece can be modularly used as VMM building blocks. That would make the VM crate a nice next step to implement, as the next highest-level crate (it would consume the VCPU).\r\n\r\n**yisun-git commented 3 hours ago**\r\nHi, @jennymankin,\r\n\r\nThanks for your comments! The suggestion to convert dynamic dispatch to static dispatch is good. Let me have a try!\r\n\r\nFor separate crate, there are dependencies I think. I.e. Hypervisor depends on Vm trait, Vm depends on Vcpu trait. Is that possible a concrete VMM (e.g. Firecracker/crosvm) only implements part of these traits but not all of them? So I am not sure if we should separate hypervisor/vm/vcpu traits. How do you think?\r\n\r\nThanks a lot for your open mind on this issue! I will raise this issue to community to see if other guys have any comments.\r\n\r\n**jennymankin commented a minute ago**\r\nHi @yisun-git, yup, you are correct that the Hypervisor crate would depend on the Vm crate, and the Vm crate on the Vcpu crate. But I can still see VMM implementations implementing lower-level traits but not the higher-level ones. For example, I would as a first pass convert the libwhp Hyper-V crate to only use the Vcpu to start, since its reference hypervisor code is implemented differently than all the functionality provided by Firecracker/crosvm. Other projects as well might find the lower-level crates useful as well, as building blocks without pulling in the whole thing.\r\n\r\n***\r\nThanks!", "updated_at": "2019-04-24T04:36:31Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/486063975", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/50#issuecomment-486063975", "created_at": "2019-04-24T04:34:03Z", "id": 486063975, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjA2Mzk3NQ=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/50", "body": "Do we have any update on this one? Did you discuss it during the last sync meeting?\r\n\r\nMy concern with this crate is that the vCPU interface for Hyper-V and KVM as well as x86 and arm doesn't really have many common functions that can be shared. I would like to understand how this is going to be used by other crates. During PTG we tried to come up with crates that would benefit from this interface. One example we took was the cpuid crate which would offer functionality for setting the guest cpu model. The only functions that could be used from the vCPU interface would be set_cpuid and get_cpuid (maybe). But these are available only on x86 I believe. So my question would be: can we have a better abstraction here? Instead of using a vCPU trait can we instead have a Cpuid trait that can be implemented by various hypervisors? The Cpuid trait would then offer an interface to get and set the cpuid in a platform and hypervisor specific way.", "updated_at": "2019-05-20T11:02:33Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/493939719", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/50#issuecomment-493939719", "created_at": "2019-05-20T11:02:33Z", "id": 493939719, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5MzkzOTcxOQ=="}, {"user": {"following_url": "https://api.github.com/users/yisun-git/following{/other_user}", "url": "https://api.github.com/users/yisun-git", "site_admin": false, "gists_url": "https://api.github.com/users/yisun-git/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODgwMTQx", "starred_url": "https://api.github.com/users/yisun-git/starred{/owner}{/repo}", "gravatar_id": "", "id": 22880141, "events_url": "https://api.github.com/users/yisun-git/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/22880141?v=4", "login": "yisun-git", "repos_url": "https://api.github.com/users/yisun-git/repos", "subscriptions_url": "https://api.github.com/users/yisun-git/subscriptions", "followers_url": "https://api.github.com/users/yisun-git/followers", "html_url": "https://github.com/yisun-git", "received_events_url": "https://api.github.com/users/yisun-git/received_events", "type": "User", "organizations_url": "https://api.github.com/users/yisun-git/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/50", "body": "Hi @andreeaflorescu,\r\n\r\nI discussed this issue with Jenny at here and the [vmm-vcpu issue](https://github.com/rust-vmm/vmm-vcpu/issues/5). As many people did not attend last meeting, we did not discuss it during the last meeting.\r\n\r\nI have completed prototype codes based on Firecracker for this issue. The Hypervisor crate uses [vmm-vcpu crate](https://github.com/rust-vmm/vmm-vcpu/pull/3) as part of it. If you'd like to see how other crates use the Hypervisor crate, I can upload the codes. But I did not implement Hyper-V part.\r\n\r\nYour suggestion is very good. In fact, I am thinking to abstract the things in smaller granularity to be more suitable for different hypervisors. But I need know some details about Hyper-V implementation to do better abstraction. Can you provide some reference codes or document? BTW, I don't think x86 and arm have big differences because KVM or Hyper-V should provide same ioctls for both platforms.\r\n\r\nOne more thing is to address Zach's comment about VcpuExit, I think we have to implement a hypervisor specific vcpu_exit_handling() in vmm crate. But the other codes should be common without hypervisor specific changes. Even with this non-elegant change, I still think the Hypervisor crate can benefit the whole project much because most parts of codes (arch/vmm/cpuid/etc) will be hypervisor agnostic. Some trade off are needed, like many other projects.", "updated_at": "2019-05-21T02:34:45Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/494216898", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/50#issuecomment-494216898", "created_at": "2019-05-21T02:34:45Z", "id": 494216898, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDIxNjg5OA=="}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/50", "body": "Hi @andreeaflorescu,\r\n\r\nThere's been some discussion on [the PR itself](https://github.com/rust-vmm/vmm-vcpu/pull/3) as to how a vCPU abstraction would be used in other crates; for example I've argued that it's a quite clean abstraction to use in crates like the architecture-specific `arch` crate. We are also working on prototyping crosvm to use Hyper-V, which will also give us a sense for how useful the abstraction might be as part of larger VMM implementations.\r\n\r\nThere might be something that can be done for a Cpuid trait, although I'll need to think about it further. Cpuid is actually handled quite differently on Hyper-V and KVM. Where (as you know) on KVM each CPUID result for a given function/index can be set on the vCPU level, for WHP it must be configured when the VM is configured but before vCPUs are created for that VM (and thus the CPUID results that are set during VM configuration are the same for all vCPUs on that VM). Additionally, individual vCPU results can be intercepted and modified (since CPUID causes a vCPU exit) on WHP. But anyway, there still might be something useful there, I'll continue to think about it.\r\n\r\n@yisun-git I'd also be interested in seeing the Firecracker prototype for the crate(s) proposed here. As for Hyper-V/Windows Hypervisor Platform details, the [libwhp](https://github.com/insula-rs/libwhp) project implements the Rust bindings and higher-level functionality APIs, as well as a fully fleshed-out example. I've also extended this crate to implement the traits of the vCPU crate in a POC branch. The the [documentation from Microsoft](https://docs.microsoft.com/en-us/virtualization/api/) also provides some overview of WHP, but is pretty sparse and not very informative. So I'd be happy to discuss it in more detail sometime if you have more questions about it.\r\n\r\n", "updated_at": "2019-05-21T05:01:17Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/494240203", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/50#issuecomment-494240203", "created_at": "2019-05-21T05:01:17Z", "id": 494240203, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NDI0MDIwMw=="}, {"user": {"following_url": "https://api.github.com/users/yisun-git/following{/other_user}", "url": "https://api.github.com/users/yisun-git", "site_admin": false, "gists_url": "https://api.github.com/users/yisun-git/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODgwMTQx", "starred_url": "https://api.github.com/users/yisun-git/starred{/owner}{/repo}", "gravatar_id": "", "id": 22880141, "events_url": "https://api.github.com/users/yisun-git/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/22880141?v=4", "login": "yisun-git", "repos_url": "https://api.github.com/users/yisun-git/repos", "subscriptions_url": "https://api.github.com/users/yisun-git/subscriptions", "followers_url": "https://api.github.com/users/yisun-git/followers", "html_url": "https://github.com/yisun-git", "received_events_url": "https://api.github.com/users/yisun-git/received_events", "type": "User", "organizations_url": "https://api.github.com/users/yisun-git/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/50", "body": "Hi @andreeaflorescu, @jennymankin \r\n\r\nI just uploaded the draft codes to implement Hypervisor crate which includes Jenny's Vcpu change. I planned to refine these draft codes but I have not had time to do it. So there are some messy codes. Sorry for that.\r\n\r\nThe codes locate at:\r\nhttps://github.com/yisun-git/Hypervisor_on_FC/tree/dbg_yisun1_hypervisor", "updated_at": "2019-05-31T01:49:53Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/497545760", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/50#issuecomment-497545760", "created_at": "2019-05-31T01:49:35Z", "id": 497545760, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NzU0NTc2MA=="}]