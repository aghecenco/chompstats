[{"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-allocator/issues/3", "body": "Before looking deeper into the actual code, I guess my first general question would be: why couldn't we use one of the existing rust collection structure as the inner `IntervalTree` tree structure:\r\n\r\n```rust\r\nstruct IntervalTree<T> {\r\n          root: BTreeMap<Range, T>>,          \r\n}\r\n```", "updated_at": "2019-11-07T13:34:39Z", "url": "https://api.github.com/repos/rust-vmm/vm-allocator/issues/comments/551080960", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-allocator/pull/3#issuecomment-551080960", "created_at": "2019-11-07T13:34:39Z", "id": 551080960, "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTA4MDk2MA=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-allocator/issues/3", "body": "> Before looking deeper into the actual code, I guess my first general question would be: why couldn't we use one of the existing rust collection structure as the inner `IntervalTree` tree structure:\r\n> \r\n> ```rust\r\n> struct IntervalTree<T> {\r\n>           root: BTreeMap<Range, T>>,          \r\n> }\r\n> ```\r\n\r\nIntervalTree supports using `range(start, end)` as the key, so we could search the entry containing a specific value(point).\r\nWe want to avoid this\r\n```\r\n    fn first_before(&self, addr: u64) -> Option<(BusRange, &Mutex<dyn BusDevice>)> {\r\n        // for when we switch to rustc 1.17: self.devices.range(..addr).iter().rev().next()\r\n        for (range, dev) in self.devices.iter().rev() {\r\n            if range.0 <= addr {\r\n                return Some((*range, dev));\r\n            }\r\n        }\r\n        None\r\n    }\r\n```", "updated_at": "2019-11-07T13:53:43Z", "url": "https://api.github.com/repos/rust-vmm/vm-allocator/issues/comments/551087638", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-allocator/pull/3#issuecomment-551087638", "created_at": "2019-11-07T13:51:35Z", "id": 551087638, "node_id": "MDEyOklzc3VlQ29tbWVudDU1MTA4NzYzOA=="}]