[{"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "number": 6, "state": "closed", "labels": [], "author_association": "MEMBER", "title": "CODEOWNERS: Make PullAssigner the default owner", "node_id": "MDExOlB1bGxSZXF1ZXN0MzE0OTU4OTM2", "pull_request": {"html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/6", "diff_url": "https://github.com/rust-vmm/vmm-vcpu/pull/6.diff", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/pulls/6", "patch_url": "https://github.com/rust-vmm/vmm-vcpu/pull/6.patch"}, "comments": 0, "updated_at": "2019-09-07T04:14:28Z", "labels_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/6/labels{/name}", "comments_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/6/comments", "locked": false, "html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/6", "created_at": "2019-09-06T13:37:38Z", "body": "The PullAssigner bot [1] will pick 2 github handles from the gate\r\nkeepers list [2] and assign them for reviewing any new PR.\r\nThe bot goes uses a round robin algorithm to select handles from the\r\nlist.\r\n\r\nWhat happens when the CODEOWNERS file gets populated with real\r\nowners? Following the PR review and approval process [3], the\r\nPullAssigner bot will either pick only one or zero reviewers from the\r\ngate keepers list, if the CODEOWNERS file points to exactly one or more\r\nthan one actual ownwer, respectively.\r\n\r\n[1] https://pullpanda.com/assigner\r\n[2] https://github.com/rust-vmm/community/blob/master/GATEKEEPERS.md\r\n[3] https://github.com/rust-vmm/community#pr-review-and-approval\r\n\r\nSigned-off-by: Samuel Ortiz <sameo@linux.intel.com>", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/6", "id": 490332638, "events_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/6/events", "closed_at": "2019-09-07T04:14:28Z", "milestone": null, "assignee": null, "repository_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu", "assignees": []}, {"user": {"following_url": "https://api.github.com/users/yisun-git/following{/other_user}", "url": "https://api.github.com/users/yisun-git", "site_admin": false, "gists_url": "https://api.github.com/users/yisun-git/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODgwMTQx", "starred_url": "https://api.github.com/users/yisun-git/starred{/owner}{/repo}", "gravatar_id": "", "id": 22880141, "events_url": "https://api.github.com/users/yisun-git/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/22880141?v=4", "login": "yisun-git", "repos_url": "https://api.github.com/users/yisun-git/repos", "subscriptions_url": "https://api.github.com/users/yisun-git/subscriptions", "followers_url": "https://api.github.com/users/yisun-git/followers", "html_url": "https://github.com/yisun-git", "received_events_url": "https://api.github.com/users/yisun-git/received_events", "type": "User", "organizations_url": "https://api.github.com/users/yisun-git/orgs"}, "number": 5, "state": "open", "labels": [], "author_association": "MEMBER", "title": "Extend vmm-vcpu to Hypervisor crate", "node_id": "MDU6SXNzdWU0MzQ2NDc1NzM=", "comments": 8, "updated_at": "2019-05-01T01:08:53Z", "labels_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5/labels{/name}", "comments_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5/comments", "locked": false, "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5", "created_at": "2019-04-18T08:22:18Z", "body": "Proposal\r\n==============================================================\r\nvmm-vcpu has made Vcpu handling be hypervisor agnostic. But there are still\r\nsome works to do to make whole rust-vmm be hypervisor agnostic. So here is\r\na proposal to extend vmm-vcpu to Hypervisor crate to make rust-vmm be\r\nhypervisor agnostic.\r\n\r\nShort Description\r\n==============================================================\r\nHypervisor crate abstracts different hypervisors interfaces (e.g. kvm ioctls) to\r\nprovide unified interfaces to upper layer. The concrete hypervisor (e.g. Kvm/\r\nHyperV) implements the traits to provide hypervisor specific functions.\r\n\r\nThe upper layer (e.g. Vmm) creates Hypervisor instance which links to the\r\nrunning hypervisor. Then, it calls running hypervisor interfaces through\r\nHypervisor instance to make the upper layer be hypervisor agnostic.\r\n\r\nWhy is this crate relevant to the rust-vmm project?\r\n==============================================================\r\nRust-vmm should be workable for all hypervisors, e.g. KVM/HyperV/etc. So the\r\nhypervisor abstraction crate is necessary to encapsulate the hypervisor specific\r\noperations so that the upper layer can simplify the implementations to be\r\nhypervisor agnostic.\r\n\r\nDesign\r\n==============================================================\r\nRelationships of crates\r\n![image](https://user-images.githubusercontent.com/22880141/56345400-38891a80-61f2-11e9-9831-c66372a14be5.png)\r\n\r\n### Compilation arguments\r\nCreate concrete hypervisor instance for Hypervisor users (e.g. Vmm) through\r\ncompilation argument. Because only one hypervisor is running for cloud scenario.\r\n\r\n### Hypervisor crate\r\nThis crate itself is simple to expose three public traits Hypervisor, Vm and Vcpu.\r\nThis crate is used by KVM/HyperV/etc. The interfaces defined below are used to\r\nshow the mechanism. They are got from Firecracker. They are more Kvm specific.\r\nWe may change them per requirements.\r\n\r\nNote: The Vcpu part refers the [1] and [2] with some changes.\r\n\r\n```\r\npub trait Hypervsior {\r\n    pub fn create_vm(&self) -> Box<Vm>;\r\n    pub fn get_api_version(&self) -> i32;\r\n    pub fn check_extension(&self, c: Cap) -> bool;\r\n    pub fn get_vcpu_mmap_size(&self) -> Result<usize>;\r\n    pub fn get_supported_cpuid(&self, max_entries_count: usize) -> Result<CpuId>;\r\n}\r\n\r\npub trait Vm {\r\n    pub fn create_vcpu(&self, id: u8) -> Box<Vcpu>;\r\n    pub fn set_user_memory_region(&self,\r\n                                  slot: u32,\r\n                                  guest_phys_addr: u64,\r\n                                  memory_size: u64,\r\n                                  userspace_addr: u64,\r\n                                  flags: u32) -> Result<()>;\r\n    pub fn set_tss_address(&self, offset: usize) -> Result<()>;\r\n    pub fn create_irq_chip(&self) -> Result<()>;\r\n    pub fn create_pit2(&self, pit_config: PitConfig) -> Result<()>;\r\n    pub fn register_irqfd(&self, evt: &EventFd, gsi: u32) -> Result<()>;\r\n}\r\n\r\npub trait Vcpu {\r\n    pub fn get_regs(&self) -> Result<VmmRegs>;\r\n    pub fn set_regs(&self, regs: &VmmRegs) -> Result<()>;\r\n    pub fn get_sregs(&self) -> Result<SpecialRegisters>;\r\n    pub fn set_sregs(&self, sregs: &SpecialRegisters) -> Result<()>;\r\n    pub fn get_fpu(&self) -> Result<Fpu>;\r\n    pub fn set_fpu(&self, fpu: &Fpu) -> Result<()>;\r\n    pub fn set_cpuid2(&self, cpuid: &CpuId) -> Result<()>;\r\n    pub fn get_lapic(&self) -> Result<LApicState>;\r\n    pub fn set_lapic(&self, klapic: &LApicState) -> Result<()>;\r\n    pub fn get_msrs(&self, msrs: &mut MsrEntries) -> Result<(i32)>;\r\n    pub fn set_msrs(&self, msrs: &MsrEntries) -> Result<()>;\r\n    pub fn run(&self) -> Result<VcpuExit>;\r\n}\r\n```\r\n\r\n[1] While the data types themselves (VmmRegs, SpecialRegisters, etc) are\r\nexposed via the trait with generic names, under the hood they can be\r\nkvm_bindings data structures, which are also exposed from the same crate\r\nvia public redefinitions:\r\n\r\n    pub use kvm_bindings::kvm_regs as VmmRegs;\r\n    pub use kvm_bindings::kvm_sregs as SpecialRegisters;\r\n    // ...\r\n\r\n\r\nSample codes to show how it works\r\n==============================================================\r\n### Kvm crate\r\nBelow are sample codes in Kvm crate to show how to implement above traits.\r\n\r\n```\r\npub struct Kvm {\r\n    kvm: File,\r\n}\r\n\r\nimpl Hypervisor for Kvm {\r\n    pub fn create_vm(&self) -> Box<Vm> {\r\n        let ret = unsafe { ioctl(&self.kvm, KVM_CREATE_VM()) };\r\n        let vm_file = unsafe { File::from_raw_fd(ret) };\r\n        Box::new(KvmVmFd { vm: vm_file, ...})\r\n    }\r\n\r\n    ...\r\n}\r\n\r\nstruct KvmVmFd {\r\n    vm: File,\r\n    ...\r\n}\r\n\r\nimpl Vm for KvmVmFd {\r\n    pub fn create_irq_chip(&self) -> Result<()> {\r\n        let ret = unsafe { ioctl(self, KVM_CREATE_IRQCHIP()) };\r\n        ...\r\n    }\r\n\r\n    pub fn create_vcpu(&self, id: u8) -> Result<Vcpu> {\r\n        let vcpu_fd = unsafe { ioctl_with_val(&self.vm,\r\n                                              KVM_CREATE_VCPU(),\r\n                                              id as c_ulong) };\r\n        ...\r\n        let vcpu = unsafe { File::from_raw_fd(vcpu_fd) };\r\n        ...\r\n        Ok(Box::new(KvmVcpuFd { vcpu, ... }))\r\n    }\r\n\r\n    ...\r\n}\r\n\r\npub struct KvmVcpuFd {\r\n    vcpu: File,\r\n    ...\r\n}\r\n\r\nimpl Vcpu for KvmVcpuFd {\r\n    ...\r\n}\r\n```\r\n\r\n### Vmm crate\r\nBelow are sample codes in Vmm crate to show how to work with Hypervisor\r\ncrate.\r\n\r\n```\r\nstruct Vmm {\r\n    hyp: Box<Hypervisor>,\r\n    ...\r\n}\r\n\r\nimpl Vmm {\r\n    fn new(h: Box<Hypervisor>, ...) -> Self {\r\n        Vmm {hyp: h}\r\n        ...\r\n    }\r\n    ...\r\n}\r\n\r\npub struct GuestVm {\r\n    fd: Box<Vm>,\r\n    ...\r\n}\r\n\r\nimpl GuestVm {\r\n    pub fn new(hyp: Box<Hypervisor>) -> Result<Self> {\r\n        let vm_fd = hyp.create_vm();\r\n        ...\r\n        let cpuid = hyp.get_supported_cpuid(MAX_CPUID_ENTRIES);\r\n        ...\r\n        Ok(GuestVm {\r\n            fd: vm_fd,\r\n            supported_cpuid: cpuid,\r\n            guest_mem: None,\r\n        })\r\n    }\r\n    ...\r\n}\r\n\r\npub struct GuestVcpu {\r\n    fd: Box<Vcpu>,\r\n    ...\r\n}\r\n\r\nimpl GuestVcpu {\r\n    pub fn new(id: u8, vm: &GuestVm) -> Result<Self> {\r\n        let vcpu = vm.fd.create_vcpu(id);\r\n        Ok(GuestVcpu { fd: vcpu, ... }\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nWhen start Vmm, create concrete hypervisor instance according to compilation\r\nargument. Then, set it to Vmm and start the flow: create guest  vm -> create guest\r\nvcpus -> run.\r\n\r\nReferences:\r\n[1] https://github.com/rust-vmm/community/issues/40\r\n[2] https://github.com/rust-vmm/vmm-vcpu", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "id": 434647573, "events_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5/events", "closed_at": null, "milestone": null, "assignee": null, "repository_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu", "assignees": []}, {"user": {"following_url": "https://api.github.com/users/rbradford/following{/other_user}", "url": "https://api.github.com/users/rbradford", "site_admin": false, "gists_url": "https://api.github.com/users/rbradford/gists{/gist_id}", "node_id": "MDQ6VXNlcjU4ODIyNA==", "starred_url": "https://api.github.com/users/rbradford/starred{/owner}{/repo}", "gravatar_id": "", "id": 588224, "events_url": "https://api.github.com/users/rbradford/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/588224?v=4", "login": "rbradford", "repos_url": "https://api.github.com/users/rbradford/repos", "subscriptions_url": "https://api.github.com/users/rbradford/subscriptions", "followers_url": "https://api.github.com/users/rbradford/followers", "html_url": "https://github.com/rbradford", "received_events_url": "https://api.github.com/users/rbradford/received_events", "type": "User", "organizations_url": "https://api.github.com/users/rbradford/orgs"}, "number": 4, "state": "open", "labels": [], "author_association": "MEMBER", "title": "Add CODEOWNERS file", "node_id": "MDU6SXNzdWU0MzQzNjk4NTE=", "comments": 0, "updated_at": "2019-04-23T21:04:07Z", "labels_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/4/labels{/name}", "comments_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/4/comments", "locked": false, "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/4", "created_at": "2019-04-17T16:15:10Z", "body": "Please add a CODEOWNERS file with the details of the maintainers. Please use the following format as outlined in: https://help.github.com/en/articles/about-code-owners\r\n\r\nMost projects can simply follow the wildcard syntax. e.g.\r\n\r\n`* @owner1 @owner2`\r\n\r\nNot only does this provide a way to see who is responsible or this repository they will also automatically be notified of incoming PR reviews.", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/4", "id": 434369851, "events_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/4/events", "closed_at": null, "milestone": null, "assignee": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "repository_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu", "assignees": [{"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}]}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "number": 3, "state": "open", "labels": [], "author_association": "MEMBER", "title": "Implementation of vCPU crate", "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwNzM0Nzg1", "pull_request": {"html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/3", "diff_url": "https://github.com/rust-vmm/vmm-vcpu/pull/3.diff", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/pulls/3", "patch_url": "https://github.com/rust-vmm/vmm-vcpu/pull/3.patch"}, "comments": 6, "updated_at": "2019-05-29T18:26:36Z", "labels_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/3/labels{/name}", "comments_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/3/comments", "locked": false, "html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/3", "created_at": "2019-04-16T02:44:40Z", "body": "This PR is for a simple crate that provides a trait abstraction of a virtual CPU (vCPU).\r\n\r\nEach VMM can then provide their own implementation of the vCPU trait (for example, I have a implementation of the `Vcpu` trait for the `VcpuFd` struct of `rust-vmm/kvm-ioctls`; when this PR is approved, I can make any last minute changes/tests to that POC and put it up for PR as well).\r\n\r\nIssue/design [here](https://github.com/rust-vmm/community/issues/40)", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/3", "id": 433558484, "events_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/3/events", "closed_at": null, "milestone": null, "assignee": null, "repository_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu", "assignees": []}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "number": 2, "state": "closed", "labels": [], "author_association": "MEMBER", "title": "Implementation of vCPU crate", "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwNzM0NTg4", "pull_request": {"html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/2", "diff_url": "https://github.com/rust-vmm/vmm-vcpu/pull/2.diff", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/pulls/2", "patch_url": "https://github.com/rust-vmm/vmm-vcpu/pull/2.patch"}, "comments": 0, "updated_at": "2019-04-16T02:43:28Z", "labels_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/2/labels{/name}", "comments_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/2/comments", "locked": false, "html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/2", "created_at": "2019-04-16T02:43:19Z", "body": "This PR is for a simple crate that provides a trait abstraction of a virtual CPU (vCPU).\r\n\r\nEach VMM can then provide their own implementation of the vCPU trait (for example, I have a implementation of the `Vcpu` trait for the `VcpuFd` struct of `rust-vmm/kvm-ioctls`; when this PR is approved, I can make any last minute changes/tests to that POC and put it up for PR as well).\r\n\r\nIssue/design [here](https://github.com/rust-vmm/community/issues/40)", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/2", "id": 433558223, "events_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/2/events", "closed_at": "2019-04-16T02:43:28Z", "milestone": null, "assignee": null, "repository_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu", "assignees": []}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "number": 1, "state": "closed", "labels": [], "author_association": "MEMBER", "title": "Implementation of vmm-vcpu crate", "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwNzI5MjU3", "pull_request": {"html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/1", "diff_url": "https://github.com/rust-vmm/vmm-vcpu/pull/1.diff", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/pulls/1", "patch_url": "https://github.com/rust-vmm/vmm-vcpu/pull/1.patch"}, "comments": 0, "updated_at": "2019-04-16T02:32:16Z", "labels_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/1/labels{/name}", "comments_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/1/comments", "locked": false, "html_url": "https://github.com/rust-vmm/vmm-vcpu/pull/1", "created_at": "2019-04-16T02:07:44Z", "body": "This PR is for a simple crate that provides a trait abstraction of a virtual CPU (vCPU).\r\n\r\nEach VMM can then provide their own implementation of the vCPU trait (for example, I have a implementation of the `Vcpu` trait for the `VcpuFd` struct of `rust-vmm/kvm-ioctls`; when this PR is approved, I can make any last minute changes/tests to that POC and put it up for PR as well).\r\n\r\nIssue/design [here](https://github.com/rust-vmm/community/issues/40)", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/1", "id": 433550869, "events_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/1/events", "closed_at": "2019-04-16T02:32:16Z", "milestone": null, "assignee": null, "repository_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu", "assignees": []}]