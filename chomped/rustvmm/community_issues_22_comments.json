[{"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "@jiangliu I'm creating that issue so that we can create a `memory-model` repo and you can send your initial code drop there. Discussing through a separate issue makes it a little hard to follow.", "updated_at": "2019-02-15T16:10:57Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/464105732", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-464105732", "created_at": "2019-02-15T16:10:57Z", "id": 464105732, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDEwNTczMg=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Thanks, sameo! Will try implement a PoC by following @bonzini 's suggestion.", "updated_at": "2019-02-15T16:11:42Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/464106009", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-464106009", "created_at": "2019-02-15T16:11:42Z", "id": 464106009, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDEwNjAwOQ=="}, {"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Thanks @jiangliu ", "updated_at": "2019-02-15T16:18:47Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/464108549", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-464108549", "created_at": "2019-02-15T16:18:47Z", "id": 464108549, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NDEwODU0OQ=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "LGTM\r\n\r\n@andreeaflorescu @zachreizner @aghecenco PTAL", "updated_at": "2019-02-19T17:20:52Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465227508", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465227508", "created_at": "2019-02-19T17:20:52Z", "id": 465227508, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTIyNzUwOA=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Can we do a bit of brainstorming for the name of this crate? In the context of crates.io memory-model doesn't say much in my opinion.", "updated_at": "2019-02-19T17:46:57Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465237288", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465237288", "created_at": "2019-02-19T17:46:57Z", "id": 465237288, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTIzNzI4OA=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "True, maybe `vmm-memory-model` would be more appropriate.", "updated_at": "2019-02-19T17:54:57Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465240210", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465240210", "created_at": "2019-02-19T17:54:57Z", "id": 465240210, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTI0MDIxMA=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "This crate deals with virtual machine memory, so how about vm-mem or vmmem?\r\n", "updated_at": "2019-02-19T18:00:18Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465242257", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465242257", "created_at": "2019-02-19T18:00:18Z", "id": 465242257, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTI0MjI1Nw=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "`vm-memory`?", "updated_at": "2019-02-19T18:02:42Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465243122", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465243122", "created_at": "2019-02-19T18:02:42Z", "id": 465243122, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTI0MzEyMg=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "`vmm-memaccess`?", "updated_at": "2019-02-19T23:22:53Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465353269", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465353269", "created_at": "2019-02-19T23:22:53Z", "id": 465353269, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTM1MzI2OQ=="}, {"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "`vm-memory` is quite descriptive imho.", "updated_at": "2019-02-20T08:47:20Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/465480858", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-465480858", "created_at": "2019-02-20T08:47:20Z", "id": 465480858, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NTQ4MDg1OA=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Design documentation for the memory-model crate (https://github.com/jiangliu/memory-model/tree/v2)\r\n# memory-model\r\nA library to manage and access virtual machine's physical memory.\r\n\r\nThe `memory-model` crate aims to provide a set of stable traits for consumers to access virtual machine's physical memory. Based on these common traits, typical consumers like hypervisors, virtio backend drivers, vhost-user drivers could access guest's physical memory without knowing the implementation details. And thus virtual device backend drivers based on this crate may be reused by different hypervisors.\r\n\r\nOn the other hand, this crate dosen't define the way how the underline mechanism is implemented to access guest's physical memory. For light-wieght hypervisors like crosvm and firecracker, they may make some assumptions about the structure of virtual machine's physical memory and implement a light-weight backend to access guest's memory. For hypervisors like qemu, a high performance and full functionality backend may be implemented with less assumptions.\r\n\r\nThis crate is derived from two upstream projects:\r\n- [crosvm project](https://chromium.googlesource.com/chromiumos/platform/crosvm/) commit 186eb8b0db644892e8ffba8344efe3492bb2b823\r\n- [firecracker project](https://firecracker-microvm.github.io/) commit 80128ea61b305a27df1f751d70415b04b503eae7\r\n\r\nTo be hypervisor neutral, the high level abstraction has been heavily refactored. It could be divided into four parts as:\r\n\r\n### Abstraction of Generic Address Space \r\nBuild generic abstractions to describe and access an address space as below:\r\n- AddressValue: stores the raw value of an address. Typically u32, u64 or usize is used to store the raw value. But pointers, such as \\*u8, can't be used because it doesn't implement the Add and Sub traits.\r\n- Address: encapsulates an AddressValue object and defines methods to access it.\r\n- AddressRegion: defines methods to access content within an address region. An address region may be continuous or it may have holes within the range [min\\_addr, max\\_addr) managed by it.\r\n- AddressSpace: extends AddressRegion to build hierarchy architecture. An AnddressSpace object contains a group of non-intersected AddressRegion objects, and the contained AddressRegion object may be another AddressSpace object. By this way, a hierarchy tree may be built to describe an complex address space structure.\r\n\r\nTo make the abstraction as generic as possible, all the core traits only define methods to access the address space are defined here, and they never define methods to manage (create, delete, insert, remove etc) address spaces. By this way, the address space consumers (virtio device drivers, vhost-user drivers and boot loaders etc) may be decoupled from the address space provider (typically a hypervisor).\r\n\r\n### Specialization for Virtual Machine Physical Address Space\r\nThe generic address space crates are specialized to access guest's physical memory with following traits:\r\n- GuestAddress: represents a guest physical address (GPA). On ARM64, a 32-bit hypervisor may be used to support a 64-bit guest. For simplicity, u64 is used to store the the raw value no matter the guest a 32-bit or 64-bit virtual machine.\r\n- GuestMemoryRegion: used to represent a continuous region of guest's physical memory.\r\n- GuestMemory: used to represent a collection of GuestMemoryRegion objects. The main responsibilities of the GuestMemory trait are:\r\n        - hide the detail of accessing guest's physical address.\r\n        - map a request address to a GuestMemoryRegion object and relay the request to it.\r\n        - handle cases where an access request spanning two or more GuestMemoryRegion objects.\r\n\r\nThe virtual machine memory consumers, such as virtio device drivers, vhost drivers and boot loaders etc, should only rely on traits defined here to access guest's memory.\r\n\r\n### A Sample and Default Backend Implementation Based on mmap()\r\nProvide a default and sample implementation of the GuestMemory trait by mmapping guest's memory into current process. Three data structures are introduced here:\r\n- MmapRegion: mmap a continous range of guest's physical memory into current and provide methods to access the mmapped memory.\r\n- GuestRegionMmap: a wrapper structure to map guest physical address into (mmap\\_region, offset) tuple.\r\n- GuestMemoryMmap: manage a collection of GuestRegionMmap objects for a virtual machine.\r\n\r\nOne of the main responsibilities of the GuestMemoryMmap object is to handle the use cases where an access request crosses the memory region boundary. This scenario may be triggered when memory hotplug is supported. So there's a tradeoff between functionality code and complexity:\r\n- use following pattern for simplicity which fails when the request crosses region boundary. It's current default behavior in the crosvm and firecracker project.\r\n```rust\r\n        let guest_memory_mmap: GuestMemoryMmap = ...\r\n        let addr: GuestAddress = ...\r\n        let buf = &mut [0u8; 5];\r\n        let result = guest_memory_mmap.find_region(addr).unwrap().write_slice(buf, addr);\r\n```\r\n- use following pattern for functionality to support request crossing region boundary:\r\n```rust\r\n        let guest_memory_mmap: GuestMemoryMmap = ...\r\n        let addr: GuestAddress = ...\r\n        let buf = &mut [0u8; 5];\r\n        let result = guest_memory_mmap.write_slice(buf, addr);\r\n```\r\n### Utilities and Helpers\r\nFollowing utility and helper traits/macros are imported from the [crosvm project](https://chromium.googlesource.com/chromiumos/platform/crosvm/) with minor changes:\r\n- DataInit: Types for which it is safe to initialize from raw data. A type `T` is `DataInit` if and only if it can be initialized by reading its contents from a byte array. This is generally true for all plain-old-data structs.  It is notably not true for any type that includes a reference.\r\n- {Le,Be}\\_{16,32,64}: Explicit endian types useful for embedding in structs or reinterpreting data.\r\n- VolatileMemory: Types for volatile access to memory.\r\n\r\n### Relationship among Traits and Structs\r\n- AddressValue\r\n- Address\r\n- AddressRegion\r\n- AddressSpace: AddressRegion\r\n- GuestAddress: Address\\<u64\\>\r\n- GuestMemoryRegion: AddressRegion<A = GuestAddress, E = Error>\r\n- GuestMemory: AddressSpace<GuestAddress, Error> + AddressRegion<A = GuestAddress, E = Error>\r\n- MmapAddress: Address\\<usize\\>\r\n- MmapRegion: AddressRegion<A = MmapAddress, E = Error>\r\n- GuestRegionMmap: AddressRegion<A = GuestAddress, E = Error> + GuestMemoryRegion\r\n- GuestMemoryMmap: AddressSpace<GuestAddress, Error> + AddressRegion<A = GuestAddress, E = Error> + GuestMemoryRegion + GuestMemory\r\n", "updated_at": "2019-02-25T10:40:01Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/466962678", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-466962678", "created_at": "2019-02-25T10:40:01Z", "id": 466962678, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2Njk2MjY3OA=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Nice! I tried to make some more simplifications at https://github.com/bonzini/memory-model/tree/v2\r\n\r\nIn particular, MmapRegion gets its `Bytes<usize>` implementation directly from `VolatileMemory`, and I removed completely `AddressSpace` and `AddressRegion` for now. Because of this I also removed `MmapAddress` in favor of just using `usize`. This made sense to me because `VolatileMemory` and `VolatileSlice` are also accessed with `usize` offsets.\r\n\r\nI tried also moving GuestMemoryMmap's `Bytes<GuestAddress>` implementation to generic code, but I couldn't do it because of the generic `try_access` method.  However, `try_access` itself can be moved to `GuestMemory`.\r\n\r\nAlso, it may be useful to place more methods (formerly in `AddressRegion`, which I removed) in `GuestMemoryRegion`, but I didn't do it until we have experience with more than 1 implementation of `GuestMemoryRegion` and `GuestMemory`.", "updated_at": "2019-02-25T23:28:03Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/467120277", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-467120277", "created_at": "2019-02-25T18:19:58Z", "id": 467120277, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzEyMDI3Nw=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Thanks for quick review:)\r\nI feel there's still one fundamental decision we need to make.\r\nCurrently qemu and firecracker maps all guest's memory into current process and kvm handles EPT faults by walking GPA->HVA->GPA. With vhost-user drivers, there's a requirement to limit access to partial of guest's memory due to security concerns.\r\nOne step further, for a hypervisor dedicated to server serverless workloads with customized guest kernel, do we still need to map all guest's memory into the hypervisor process address space? I think the answer may be 'no'.\r\n\r\nThe key idea is to manage guest's physical memory as a dedicated object, and assign part of guest's memory to related components (vhost drivers, hypervisor workers etc) according to access rules.\r\nFor example, vhost-user shouldn't access guest memory hosting guest's kernel text/data/bss sections.\r\nAnother point, currently hypervisors and guest kernels model all guest physical memory as normal RAM. We hope to enhance the hypervisor to provide guest's physical memory with additional properties, such R, W, X, SysExecute etc. This is analogous to memory type defined E820 and ACPI tables. Thus we could make use of the advanced control flags in EPT table. \r\n\r\nSo we hope we could  build a layered abstraction as:\r\nGuestPhysicalMemory: manage guest's physical memory resources. This is a new layer and have proposed to firecracker community but rejected.\r\nGuestMemory:  interfaces to access partial/all of the guest's memory. This is the current implementation in crosvm/firecracker.\r\n\r\nAnd the address space abstraction is the common abstraction for both GuestPhysicalMemory and GuestMemory. And to support above mentioned usages, the AddressRegion traits need to be enhanced to provide memory property/type information.\r\n\r\nBased on this design, it may help to address the security concern mentioned by @alexandruag . And it may also help to implement vIOMMU/vIOTLB in vhost-user drivers(more work needed to prove this claim).\r\n\r\nSo the fundament question is:\r\n1) Should this crate provide traits to manage guest physical memory or only provide traits to access guest's memory?\r\n2) Should the guest physical management functionality be treated as a dedicated abstraction or be merged into the memory access traits(GuestMemory)?\r\nI prefer this crate could cover both guest memory management and guest memory access with dedicated objects and abstractions.\r\nThanks,\r\nGerry", "updated_at": "2019-02-26T06:22:09Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/467309032", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-467309032", "created_at": "2019-02-26T06:10:41Z", "id": 467309032, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzMwOTAzMg=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Please refer to https://github.com/rust-vmm/community/issues/16 for previous discussions.", "updated_at": "2019-02-26T06:33:52Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/467314063", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-467314063", "created_at": "2019-02-26T06:33:52Z", "id": 467314063, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzMxNDA2Mw=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "> Should this crate provide traits to manage guest physical memory or only provide traits to access guest's memory?\r\n\r\nI have no objections to providing both, however I would start with a restricted implementation until it is clear what is common between the various users.\r\n\r\nIn fact I don't have any problem with adding more information to `AddressRegion` or `GuestMemoryRegion`. All I am doing in my refactoring is making sure that the interface is as simple as possible, and the implementation is as generic as possible.\r\n\r\nI have pushed a new version that is nicely split into multiple commits and also adds a generic implementation of `Bytes<GuestAddress>`.\r\n\r\nBy the way, it might even be possible to make a separate crate for DataInit, Bytes, endian types and VolatileMemory. What do you think?", "updated_at": "2019-02-26T10:57:17Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/467394009", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-467394009", "created_at": "2019-02-26T10:57:17Z", "id": 467394009, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzM5NDAwOQ=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "\n\n> On Feb 26, 2019, at 6:58 PM, Paolo Bonzini <notifications@github.com <mailto:notifications@github.com>> wrote:\n> \n> Should this crate provide traits to manage guest physical memory or only provide traits to access guest's memory?\n> \n> I have no objections to providing both, however I would start with a restricted implementation until it is clear what is common between the various users.\n> \n> In fact I don't have any problem with adding more information to AddressRegion or GuestMemoryRegion. All I am doing in my refactoring is making sure that the interface is as simple as possible, and the implementation is as generic as possible.\n> \nGreat, so let's start small and add needed interfaces on demand.\n\n> I have pushed a new version that is nicely split into multiple commits and also adds a generic implementation of Bytes<GuestAddress>.\n> \n> By the way, it might even be possible to make a separate crate for DataInit, Bytes, endian types and VolatileMemory. What do you think?\n> \nSeems reasonable because these traits have more generic usage scenarios than GuestMemory.\n\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/rust-vmm/community/issues/22#issuecomment-467394009>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AB14_Nj4VeWbuzrxR0HQm9RLva72Ps76ks5vRRMNgaJpZM4a98W8>.\n> \n\n", "updated_at": "2019-02-26T11:06:47Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/467396847", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-467396847", "created_at": "2019-02-26T11:06:47Z", "id": 467396847, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2NzM5Njg0Nw=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Hi buddies,\r\nPaolo and I have cooperated to shape out version 2 of the memory-model crate, you may access it at my personal repository at https://github.com/jiangliu/memory-model/tree/v2. Please help to review it and give your feedbacks. If the overall design is OK, please help to create repository `vm-memory` under project rust-vmm then we could send out PRs.\r\n\r\nNote: as we have discussed, the 'memory-model' crate will be renamed as 'vm-memory'.\r\n", "updated_at": "2019-02-28T10:41:28Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/468224850", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-468224850", "created_at": "2019-02-28T10:41:28Z", "id": 468224850, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODIyNDg1MA=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "@jiangliu This looks very good! I am looking forward to the future pull requests on the brand new `vm-memory` repo :)", "updated_at": "2019-02-28T16:58:12Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/468350786", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-468350786", "created_at": "2019-02-28T16:58:12Z", "id": 468350786, "node_id": "MDEyOklzc3VlQ29tbWVudDQ2ODM1MDc4Ng=="}, {"user": {"following_url": "https://api.github.com/users/bonzini/following{/other_user}", "url": "https://api.github.com/users/bonzini", "site_admin": false, "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "node_id": "MDQ6VXNlcjQyMDgy", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "gravatar_id": "", "id": 42082, "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/42082?v=4", "login": "bonzini", "repos_url": "https://api.github.com/users/bonzini/repos", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "followers_url": "https://api.github.com/users/bonzini/followers", "html_url": "https://github.com/bonzini", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "organizations_url": "https://api.github.com/users/bonzini/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "@sameo This can be closed now", "updated_at": "2019-03-26T15:23:02Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/476700138", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-476700138", "created_at": "2019-03-26T15:23:02Z", "id": 476700138, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjcwMDEzOA=="}, {"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/community/issues/22", "body": "Fixed with  https://github.com/rust-vmm/vm-memory/pull/1", "updated_at": "2019-03-26T15:33:19Z", "url": "https://api.github.com/repos/rust-vmm/community/issues/comments/476705526", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/community/issues/22#issuecomment-476705526", "created_at": "2019-03-26T15:33:19Z", "id": 476705526, "node_id": "MDEyOklzc3VlQ29tbWVudDQ3NjcwNTUyNg=="}]