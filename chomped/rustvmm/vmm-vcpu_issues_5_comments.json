[{"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Hi @yisun-git, thank you for providing this additional detail on the VMM/hypervisor crates!\r\n\r\nSome thoughts:\r\n\r\n- I like the VMM and the VM traits you've outlined and the functionality they provide. I see these working nicely with the VCPU trait and providing a nice hierarchy of functionality and solid building blocks for building hypervisors.\r\n\t\r\n- I see dynamic dispatch being utilized in the `create` functions of `Hypervisor` and `Vm`. I think these might be better served using static dispatch and trait generics, rather than \"box\"ing the references to the other trait implementations. The overhead introduced by dynamic dispatch and the virtual functions may not be necessary, and as you said, there will only be one type or implementation of hypervisor <-> VM <-> VCPU (as built at the highest level through conditional compilation) for each scenario. A statically-dispatched return value of a Trait generic [can be achieved with the `impl Trait` syntax](https://doc.rust-lang.org/edition-guide/rust-2018/trait-system/impl-trait-for-returning-complex-types-with-ease.html). For example:\r\n\t\r\n```\r\npub trait Vcpu { \r\n    // \u2026\r\n}\r\npub trait Vm {\r\n    pub fn create_vcpu(&self, id: u8) -> impl Vcpu;\r\n    // \u2026\r\n}\r\n```\r\n\t\r\n- I think each of these traits would be better implemented as a separate crate, so that each piece can be modularly used as VMM building blocks. That would make the VM crate a nice next step to implement, as the next highest-level crate (it would consume the VCPU). \r\n\r\nYou've created the issue here due to its connection to the Vcpu crate, but you can also feel free to move the discussion to the rust-vmm community issues to ensure that a larger audience sees it as well.\r\n", "updated_at": "2019-04-23T23:49:41Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486014825", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486014825", "created_at": "2019-04-23T23:49:41Z", "id": 486014825, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjAxNDgyNQ=="}, {"user": {"following_url": "https://api.github.com/users/yisun-git/following{/other_user}", "url": "https://api.github.com/users/yisun-git", "site_admin": false, "gists_url": "https://api.github.com/users/yisun-git/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODgwMTQx", "starred_url": "https://api.github.com/users/yisun-git/starred{/owner}{/repo}", "gravatar_id": "", "id": 22880141, "events_url": "https://api.github.com/users/yisun-git/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/22880141?v=4", "login": "yisun-git", "repos_url": "https://api.github.com/users/yisun-git/repos", "subscriptions_url": "https://api.github.com/users/yisun-git/subscriptions", "followers_url": "https://api.github.com/users/yisun-git/followers", "html_url": "https://github.com/yisun-git", "received_events_url": "https://api.github.com/users/yisun-git/received_events", "type": "User", "organizations_url": "https://api.github.com/users/yisun-git/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Hi, @jennymankin,\r\n\r\nThanks for your comments!  The suggestion to convert dynamic dispatch to static dispatch is good. Let me have a try!\r\n\r\nFor separate crate, there are dependencies I think. I.e. Hypervisor depends on Vm trait, Vm depends on Vcpu trait. Is that possible a concrete VMM (e.g. Firecracker/crosvm) only implements part of these traits but not all of them? So I am not sure if we should separate hypervisor/vm/vcpu traits. How do you think?\r\n\r\nThanks a lot for your open mind on this issue! I will raise this issue to community to see if other guys have any comments.", "updated_at": "2019-04-24T01:59:18Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486037566", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486037566", "created_at": "2019-04-24T01:59:18Z", "id": 486037566, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjAzNzU2Ng=="}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Hi @yisun-git, yup, you are correct that the Hypervisor crate would depend on the Vm crate, and the Vm crate on the Vcpu crate. But I can still see VMM implementations implementing lower-level traits but not the higher-level ones. For example, I would as a first pass convert the `libwhp` Hyper-V crate to only use the `Vcpu` to start, since its reference hypervisor code is implemented differently than all the functionality provided by Firecracker/crosvm. Other projects as well might find the lower-level crates useful as well, as building blocks without pulling in the whole thing.", "updated_at": "2019-04-24T04:30:01Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486063304", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486063304", "created_at": "2019-04-24T04:30:01Z", "id": 486063304, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjA2MzMwNA=="}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Moved this discussion over to https://github.com/rust-vmm/community/issues/50! Thanks :)", "updated_at": "2019-04-24T04:34:44Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486064089", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486064089", "created_at": "2019-04-24T04:34:44Z", "id": 486064089, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjA2NDA4OQ=="}, {"user": {"following_url": "https://api.github.com/users/yisun-git/following{/other_user}", "url": "https://api.github.com/users/yisun-git", "site_admin": false, "gists_url": "https://api.github.com/users/yisun-git/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODgwMTQx", "starred_url": "https://api.github.com/users/yisun-git/starred{/owner}{/repo}", "gravatar_id": "", "id": 22880141, "events_url": "https://api.github.com/users/yisun-git/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/22880141?v=4", "login": "yisun-git", "repos_url": "https://api.github.com/users/yisun-git/repos", "subscriptions_url": "https://api.github.com/users/yisun-git/subscriptions", "followers_url": "https://api.github.com/users/yisun-git/followers", "html_url": "https://github.com/yisun-git", "received_events_url": "https://api.github.com/users/yisun-git/received_events", "type": "User", "organizations_url": "https://api.github.com/users/yisun-git/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Hi, @jennymankin \r\n\r\nI did a quick test for \"impl Trait\" but it seems it cannot work for my requirements.\r\n\r\nFirst, I want to declare a field with generic type in struct Vmm.\r\n    struct Vmm {\r\n        hyp: Hypervisor, (\"impl Hypervisor\" is tried too)\r\n    }\r\n\r\nBut this is not allowed with below error:\r\n    error 277| the size for values of type `(dyn hypervisor::Hypervisor + 'static)` cannot be known at compilation time\r\n\r\nSecond, it seems the \"impl Trait\" cannot be used in trait definition.\r\n    pub trait Hypervisor {\r\n        fn create_vm(&self) -> impl Vm;\r\n    }\r\n\r\nError reported:\r\n    error 562| `impl Trait` not allowed outside of function and inherent method return types\r\n\r\nAny suggestion? Thanks!\r\n", "updated_at": "2019-04-24T06:47:22Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486090945", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486090945", "created_at": "2019-04-24T06:47:22Z", "id": 486090945, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjA5MDk0NQ=="}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Addressing the second error, since getting the Vm and Hypervisor abstractions working is a prerequisite for the Vmm crate (and I actually need to think more about the Vmm crate in general):\r\n\r\nAh right, I forgot about the limitation about using an `impl Trait` in a Trait definition. Maybe an associated type is appropriate here:\r\n\r\n(Also note that each of these `create_*` functions should probably return a `Result<thing>` rather than just a `thing`), so I've prototyped both here)\r\n\r\nTrait definition:\r\n```\r\npub trait Vm {\r\n    type VcpuType;\r\n\r\n    fn create_vcpu2(&self, id:u8) -> Self::VcpuType;\r\n    fn create_vcpu3(&self, id:u8) -> Result<Self::VcpuType>;\r\n```\r\n\r\nVm trait implementation for kvm-ioctls:\r\n\r\n```\r\nimpl Vm for VmFd {\r\n    type VcpuType = VcpuFd;\r\n\r\n    fn create_vcpu2(&self, id:u8) -> VcpuFd {\r\n        let vcpu = unsafe { File::from_raw_fd(0) }; // yeah these two lines are nonsense, just want to make it build :)\r\n        let kvm_run_ptr = KvmRunWrapper::mmap_from_fd(&vcpu, self.run_size).unwrap();\r\n\r\n        new_vcpu(vcpu, kvm_run_ptr)\r\n    }\r\n    \r\n    fn create_vcpu3(&self, id:u8) -> Result<VcpuFd> {\r\n        let vcpu = unsafe { File::from_raw_fd(0) };   // yeah these two lines are nonsense, just want to make it build :)\r\n        let kvm_run_ptr = KvmRunWrapper::mmap_from_fd(&vcpu, self.run_size)?;\r\n\r\n        Ok(new_vcpu(vcpu, kvm_run_ptr))\r\n    }\r\n}\r\n```\r\n\r\nThis works under the assumption that a given implementation of the Vm trait would only want to implement a single type of Vcpu--that a Vm trait implementation would not want to interchange different types of Vcpus. Without thinking too deeply, I think this is a reasonable assumption, in that a KVM Vm will want a KVM Vcpu, a Hyper-V Vm will want a Hyper-V Vcpu, etc.\r\n\r\nHowever, if something more generic is desired, there is a Rust RFC for expanding the `impl trait` concept to be used as definitions to associated types. It looks like there is active, recent development on this work and even a PR up, so if looks like something that'd be useful long-term it might not be far away: \r\n\r\nhttps://github.com/rust-lang/rfcs/pull/2515\r\n\r\n(The comments/details toward the end of the PR drive home the syntax and use cases)", "updated_at": "2019-04-24T20:09:22Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486405745", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486405745", "created_at": "2019-04-24T20:08:20Z", "id": 486405745, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjQwNTc0NQ=="}, {"user": {"following_url": "https://api.github.com/users/yisun-git/following{/other_user}", "url": "https://api.github.com/users/yisun-git", "site_admin": false, "gists_url": "https://api.github.com/users/yisun-git/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODgwMTQx", "starred_url": "https://api.github.com/users/yisun-git/starred{/owner}{/repo}", "gravatar_id": "", "id": 22880141, "events_url": "https://api.github.com/users/yisun-git/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/22880141?v=4", "login": "yisun-git", "repos_url": "https://api.github.com/users/yisun-git/repos", "subscriptions_url": "https://api.github.com/users/yisun-git/subscriptions", "followers_url": "https://api.github.com/users/yisun-git/followers", "html_url": "https://github.com/yisun-git", "received_events_url": "https://api.github.com/users/yisun-git/received_events", "type": "User", "organizations_url": "https://api.github.com/users/yisun-git/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "Hi, @jennymankin \r\n\r\nThanks for the ideas! But there is one problem not solved. In vmm/src/vstate.rs (firecracker), the struct Vcpu is declared as below. The VcpuFd is a kvm specific struct.\r\n\r\n```\r\npub struct Vcpu {\r\n    ...\r\n    fd: VcpuFd,\r\n    ...\r\n}\r\n```\r\n\r\nThe main purpose of hypervisor abstraction is to make upper layer be hypervisor agnostic. So I re-design the struct Vcpu as below. Then, the Vmm crate only knows the Vcpu trait but not kvm specific VcpuFd so that Vmm crate does not need include kvm-ioctls crate.\r\n\r\n```\r\npub struct GuestVcpu {\r\n    ...\r\n    fd: Box<Vcpu>,\r\n    ...\r\n}\r\n```\r\n\r\nPer your sample codes, I do not see how to avoid including kvm specific thing, i.e. VcpuFd. Maybe something I missed?", "updated_at": "2019-04-26T02:30:26Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/486902859", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-486902859", "created_at": "2019-04-26T02:27:01Z", "id": 486902859, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4NjkwMjg1OQ=="}, {"user": {"following_url": "https://api.github.com/users/jennymankin/following{/other_user}", "url": "https://api.github.com/users/jennymankin", "site_admin": false, "gists_url": "https://api.github.com/users/jennymankin/gists{/gist_id}", "node_id": "MDQ6VXNlcjQ0ODc3NTQy", "starred_url": "https://api.github.com/users/jennymankin/starred{/owner}{/repo}", "gravatar_id": "", "id": 44877542, "events_url": "https://api.github.com/users/jennymankin/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/44877542?v=4", "login": "jennymankin", "repos_url": "https://api.github.com/users/jennymankin/repos", "subscriptions_url": "https://api.github.com/users/jennymankin/subscriptions", "followers_url": "https://api.github.com/users/jennymankin/followers", "html_url": "https://github.com/jennymankin", "received_events_url": "https://api.github.com/users/jennymankin/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jennymankin/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/5", "body": "I think you're right. To add a `VcpuGuest`-like wrapper around the thing that implements `Vcpu` functionality (the `VcpuFd`, for example) struct, the dynamic dispatch by way of a `Box<>` is the only way to make a hypervisor-agnostic `VcpuGuest` wrapper struct.\r\n\r\nBut I've stewed over this and I don't think a hypervisor-agnostic solution needs this extra `VcpuGuest` wrapper. \r\n\r\nThe reason is that there's a difference between what the hypervisor-agnostic crates (like a VMM, VM, and VCPU) provide, and the implementation of each of those traits. For example, a KVM implementation of the traits vs. a Hyper-V implementation of the crates. And then at a level higher than those, you have a specific implementation of the whole stack, for example Firecracker.\r\n\r\nAnd this `struct Vcpu` case is interesting, because the `struct Vcpu` wrapper around the `VcpuFd` is a Firecracker thing--an extra layer--and not a KVM thing (eg, it's not part of the usual VMM -> VM -> VCPU stack). You can see in all the examples provided in the `kvm-ioctls` crate that the VcpuFd _can_ be used directly after creating a VM. \r\n```\r\n    /// # extern crate kvm_ioctls;\r\n    /// # use kvm_ioctls::{Kvm, VmFd, VcpuFd};\r\n    /// let kvm = Kvm::new().unwrap();\r\n    /// let vm = kvm.create_vm().unwrap();\r\n    /// // Create one vCPU with the ID=0.\r\n    /// let vcpu = vm.create_vcpu(0);\r\n```\r\nSo while the building blocks are present for a hypervisor-agnostic VMM/VM/VCPU are there, Firecracker adds its own layers. Since Firecracker itself is implementing the VMM, at some point in the hierarchy there is/was always going to have to be a declaration of a hard implementation of the traits. That is, Firecracker was going to have create to an instance of the KVM implementation of the VMM, VM, and VCPU traits. To support another hypervisor (say Hyper-V), this would have to be conditionally compiled, and Firecracker would also (for example) create an instance of the Hyper-V implementation of the VMM, VM, and VCPU crates. \r\n\r\nSo I think it's fair to also have the `Vcpu` struct also be conditionally compiled to contain either a KVM-like `VcpuFd` or another implementation of a Vcpu like the Hyper-V one. In short, no extra level of abstraction is required.\r\n\r\nLet me know if this is unclear, I'm not sure if I'm explaining clearly what I mean :)\r\n", "updated_at": "2019-05-01T01:08:53Z", "url": "https://api.github.com/repos/rust-vmm/vmm-vcpu/issues/comments/488167748", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vmm-vcpu/issues/5#issuecomment-488167748", "created_at": "2019-05-01T01:08:53Z", "id": 488167748, "node_id": "MDEyOklzc3VlQ29tbWVudDQ4ODE2Nzc0OA=="}]