[{"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "Really great work, thanks @aghecenco !\r\nWe have discussed to relax dependency on serde traits by rust features, but seems it's a little hard to do that.\r\nAny suggestions?", "updated_at": "2019-08-05T05:59:21Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518096735", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518096735", "created_at": "2019-08-05T05:59:21Z", "id": 518096735, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODA5NjczNQ=="}, {"user": {"following_url": "https://api.github.com/users/aghecenco/following{/other_user}", "url": "https://api.github.com/users/aghecenco", "site_admin": false, "gists_url": "https://api.github.com/users/aghecenco/gists{/gist_id}", "node_id": "MDQ6VXNlcjIwMzU4Mjk=", "starred_url": "https://api.github.com/users/aghecenco/starred{/owner}{/repo}", "gravatar_id": "", "id": 2035829, "events_url": "https://api.github.com/users/aghecenco/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/2035829?v=4", "login": "aghecenco", "repos_url": "https://api.github.com/users/aghecenco/repos", "subscriptions_url": "https://api.github.com/users/aghecenco/subscriptions", "followers_url": "https://api.github.com/users/aghecenco/followers", "html_url": "https://github.com/aghecenco", "received_events_url": "https://api.github.com/users/aghecenco/received_events", "type": "User", "organizations_url": "https://api.github.com/users/aghecenco/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "I\u2019m going to work on that, haven\u2019t had the chance to yet. I\u2019m meaning to change the implementation itself too, with macros. I\u2019ll add a build feature that optionally pulls in serde and adds the serialization functionality.", "updated_at": "2019-08-05T07:03:59Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518112526", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518112526", "created_at": "2019-08-05T07:03:59Z", "id": 518112526, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODExMjUyNg=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "> I\u2019m going to work on that, haven\u2019t had the chance to yet. I\u2019m meaning to change the implementation itself too, with macros. I\u2019ll add a build feature that optionally pulls in serde and adds the serialization functionality.\r\n\r\nIt's a common issue to control serde by features, so a common solution is welcomed!", "updated_at": "2019-08-05T07:50:26Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518126086", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518126086", "created_at": "2019-08-05T07:50:26Z", "id": 518126086, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODEyNjA4Ng=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "How about adding a wrapper crate to feature control serde, typetag etc?", "updated_at": "2019-08-05T07:51:54Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518126545", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518126545", "created_at": "2019-08-05T07:51:54Z", "id": 518126545, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODEyNjU0NQ=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "@jiangliu what do you mean by wrapper crate?\r\n\r\nI am asking because I think it's similar to the proposal I had in the sync call which is: create another crate that uses kvm-bindings and re-exports the structures with added serde. Is that also what you had in mind?", "updated_at": "2019-08-05T10:46:52Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518185007", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518185007", "created_at": "2019-08-05T10:46:52Z", "id": 518185007, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODE4NTAwNw=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "> @jiangliu what do you mean by wrapper crate?\r\n> \r\n> I am asking because I think it's similar to the proposal I had in the sync call which is: create another crate that uses kvm-bindings and re-exports the structures with added serde. Is that also what you had in mind?\r\n\r\nSeems we have different IDs.\r\nThe serde/serde_derive crates provide several proc_macro_derive macros, such as\r\n#[derive(Serialize, Deserialize)].\r\n\r\nWhat I'm suggesting is to implement serde_fake/serde_fake_derive, which provides blank implementation for #[derive(Serialize, Deserialize)] macros.\r\n\r\nThen we could easily switch to the fake serde crates when serde feature is disabled.", "updated_at": "2019-08-05T11:05:13Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518189877", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518189877", "created_at": "2019-08-05T11:03:49Z", "id": 518189877, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODE4OTg3Nw=="}, {"user": {"following_url": "https://api.github.com/users/aghecenco/following{/other_user}", "url": "https://api.github.com/users/aghecenco", "site_admin": false, "gists_url": "https://api.github.com/users/aghecenco/gists{/gist_id}", "node_id": "MDQ6VXNlcjIwMzU4Mjk=", "starred_url": "https://api.github.com/users/aghecenco/starred{/owner}{/repo}", "gravatar_id": "", "id": 2035829, "events_url": "https://api.github.com/users/aghecenco/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/2035829?v=4", "login": "aghecenco", "repos_url": "https://api.github.com/users/aghecenco/repos", "subscriptions_url": "https://api.github.com/users/aghecenco/subscriptions", "followers_url": "https://api.github.com/users/aghecenco/followers", "html_url": "https://github.com/aghecenco", "received_events_url": "https://api.github.com/users/aghecenco/received_events", "type": "User", "organizations_url": "https://api.github.com/users/aghecenco/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "> The serde/serde_derive crates provide several proc_macro_derive macros, such as\r\n> #[derive(Serialize, Deserialize)].\r\n> \r\n> What I'm suggesting is to implement serde_fake/serde_fake_derive, which provides blank implementation for #[derive(Serialize, Deserialize)] macros.\r\n> \r\n> Then we could easily switch to the fake serde crates when serde feature is disabled.\r\n\r\n@alexandruag had a suggestion too - if I understood it correctly it was something in the lines of adding a new macro to `kvm-bindings` structs. Let's say we called it `#[derive(MaybeSerialize, MaybeDeserialize]`. With conditional compilation, if we wanted `serde`, this new macro would implement the `Deserialize` and `Serialize` functions from `serde`. Without it, the `MaybeSerialize / MaybeDeserialize` macro would implement empty functions\r\n\r\n@alexandruag please correct me if I got it wrong.\r\n@jiangliu what are your thoughts on this?", "updated_at": "2019-08-05T11:52:46Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518203221", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518203221", "created_at": "2019-08-05T11:52:46Z", "id": 518203221, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODIwMzIyMQ=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "> > The serde/serde_derive crates provide several proc_macro_derive macros, such as\r\n> > #[derive(Serialize, Deserialize)].\r\n> > What I'm suggesting is to implement serde_fake/serde_fake_derive, which provides blank implementation for #[derive(Serialize, Deserialize)] macros.\r\n> > Then we could easily switch to the fake serde crates when serde feature is disabled.\r\n> \r\n> @alexandruag had a suggestion too - if I understood it correctly it was something in the lines of adding a new macro to `kvm-bindings` structs. Let's say we called it `#[derive(MaybeSerialize, MaybeDeserialize]`. With conditional compilation, if we wanted `serde`, this new macro would implement the `Deserialize` and `Serialize` functions from `serde`. Without it, the `MaybeSerialize / MaybeDeserialize` macro would implement empty functions\r\n> \r\n> @alexandruag please correct me if I got it wrong.\r\n> @jiangliu what are your thoughts on this?\r\n\r\nI feel the only difference is that: @alexandruag suggests to introduce some new derive macros, my suggestion is to redefine derive macros of serde/serde_derive crates.", "updated_at": "2019-08-05T12:02:07Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518205992", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518205992", "created_at": "2019-08-05T12:02:07Z", "id": 518205992, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODIwNTk5Mg=="}, {"user": {"following_url": "https://api.github.com/users/aghecenco/following{/other_user}", "url": "https://api.github.com/users/aghecenco", "site_admin": false, "gists_url": "https://api.github.com/users/aghecenco/gists{/gist_id}", "node_id": "MDQ6VXNlcjIwMzU4Mjk=", "starred_url": "https://api.github.com/users/aghecenco/starred{/owner}{/repo}", "gravatar_id": "", "id": 2035829, "events_url": "https://api.github.com/users/aghecenco/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/2035829?v=4", "login": "aghecenco", "repos_url": "https://api.github.com/users/aghecenco/repos", "subscriptions_url": "https://api.github.com/users/aghecenco/subscriptions", "followers_url": "https://api.github.com/users/aghecenco/followers", "html_url": "https://github.com/aghecenco", "received_events_url": "https://api.github.com/users/aghecenco/received_events", "type": "User", "organizations_url": "https://api.github.com/users/aghecenco/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "> I feel the only difference is that: @alexandruag suggests to introduce some new derive macros, my suggestion is to redefine derive macros of serde/serde_derive crates.\r\n\r\n@jiangliu  if there are no name clashes because of using the same names as `serde` for macros, I like your solution better because it keeps naming consistency. I'll try it out and update here.", "updated_at": "2019-08-05T12:12:19Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/518209002", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-518209002", "created_at": "2019-08-05T12:12:19Z", "id": 518209002, "node_id": "MDEyOklzc3VlQ29tbWVudDUxODIwOTAwMg=="}, {"user": {"following_url": "https://api.github.com/users/aghecenco/following{/other_user}", "url": "https://api.github.com/users/aghecenco", "site_admin": false, "gists_url": "https://api.github.com/users/aghecenco/gists{/gist_id}", "node_id": "MDQ6VXNlcjIwMzU4Mjk=", "starred_url": "https://api.github.com/users/aghecenco/starred{/owner}{/repo}", "gravatar_id": "", "id": 2035829, "events_url": "https://api.github.com/users/aghecenco/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/2035829?v=4", "login": "aghecenco", "repos_url": "https://api.github.com/users/aghecenco/repos", "subscriptions_url": "https://api.github.com/users/aghecenco/subscriptions", "followers_url": "https://api.github.com/users/aghecenco/followers", "html_url": "https://github.com/aghecenco", "received_events_url": "https://api.github.com/users/aghecenco/received_events", "type": "User", "organizations_url": "https://api.github.com/users/aghecenco/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "Another observation to consider - all data structures defined here are FFI safe so they can all be serialized as a raw byte dump. We could have a generic `serialize`/`deserialize` function to apply to all of them. Automating this with a script, there would be no more need to manually implement the macros for newly added structs in newer kernel versions.\r\n\r\n(This isn't actual code, it's just for demonstrative purposes)\r\n\r\n```rust\r\nfn serialize_ffi(object: T) -> &[u8] {\r\n    let serialized_object: Vec<u8> = vec![];\r\n    serialized_object.copy_from_slice(slice::from_raw_parts(&object as *const T as *const u8, mem::size_of::<T>()));\r\n    serialized_object\r\n}\r\n\r\nfn deserialize_ffi(serialized_object: &[u8]) -> T {\r\n    ptr::read::<T>(serialized_object as *const u8 as *const T, mem::size_of::<T>())\r\n}\r\n```\r\n\r\nThen if we want `serde` -\r\n\r\n```rust\r\n#[cfg(use_serde)]\r\nuse serde::{Serialize, Deserialize}];\r\n\r\nimpl Serialize for PLACEHOLDER {\r\n    fn serialize<S>(&self, serializer: S) whereS: Serializer {\r\n        serializer.serialize_bytes(serialize_ffi::<PLACEHOLDER>(self), mem::size_of::<PLACEHOLDER>())\r\n    }\r\n}\r\n\r\nimpl Deserialize for PLACEHOLDER {\r\n    fn deserialize<D>(deserializer: D) where D: Deserializer<'de> {\r\n        struct PLACEHOLDER_visitor;\r\n\r\n        impl<'de> Visitor<'de> for PLACEHOLDER_visitor {\r\n            type Value = PLACEHOLDER_visitor;\r\n\r\n            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\r\n                formatter.write_str(\"PLACEHOLDER_visitor\")\r\n            }\r\n\r\n            fn visit_seq<V>(self, mut seq: V) where V: SeqAccess<'de> {\r\n                let bytes: Vec<u8> = seq.next_element().unwrap();\r\n                Ok(deserialize_ffi::<PLACEHOLDER>(bytes))\r\n            }\r\n        }\r\n\r\n        const FIELDS: &'static [&'static str] = &[\"bytes\"];\r\n        deserializer.deserialize_struct(\"PLACEHOLDER\", FIELDS, PLACEHOLDER_visitor)\r\n    }\r\n}\r\n```", "updated_at": "2019-08-07T10:34:48Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/519040937", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-519040937", "created_at": "2019-08-07T10:34:48Z", "id": 519040937, "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTA0MDkzNw=="}, {"user": {"following_url": "https://api.github.com/users/alexandruag/following{/other_user}", "url": "https://api.github.com/users/alexandruag", "site_admin": false, "gists_url": "https://api.github.com/users/alexandruag/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwOTg5Nzg3", "starred_url": "https://api.github.com/users/alexandruag/starred{/owner}{/repo}", "gravatar_id": "", "id": 10989787, "events_url": "https://api.github.com/users/alexandruag/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/10989787?v=4", "login": "alexandruag", "repos_url": "https://api.github.com/users/alexandruag/repos", "subscriptions_url": "https://api.github.com/users/alexandruag/subscriptions", "followers_url": "https://api.github.com/users/alexandruag/followers", "html_url": "https://github.com/alexandruag", "received_events_url": "https://api.github.com/users/alexandruag/received_events", "type": "User", "organizations_url": "https://api.github.com/users/alexandruag/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "Hi, really sorry for being this late to the discussion. I think there are a couple of aspects we have to consider. Some of them have what appears to be a straightforward/widely accepted approach already, but I'm going to try and mention them all just to make sure we're on the same page.\r\n\r\n- We've chosen the `serde` interfaces (`Serialize` and `Deserialize`) to express the serialization functionality. This has the advantage of being able to leverage other crates/functionality which is built on top of them. At the same time, and it seems relatively straightforward switching to something like custom defined traits in case we ever need more expressivity.\r\n\r\n- Regarding gating the presence of the serialization functionality behind something, I like the feature-based approach most. From a high level perspective I see this as having another `kvm-bindings` feature (\"serialize\" or something like that), and then scattering conditional derives around, for example `#[cfg_attr(feature = \"serialize\", derive(Serialize, Deserialize))]`. \r\n\r\n- We also have to consider the semantics of the serialization. For structures (even unions) that don't  have flexible array members things are pretty straightforward: the data we want to serialize are the bytes which make up the structs, since we're dealing with \"plain old data\" structures. However, serialization for entities that also have a FAM can mean two things: only serialize the structure up to the FAM member, or serialize the FAM data as well. On one hand the latter is more natural, but it's also more awkward to implement, and the deserialization part is very difficult to safely define in Rust. That's why I think we should go with the first option, be very clear about it, and recommend ppl to use something like https://github.com/rust-vmm/vmm-sys-util/blob/master/src/fam.rs (which should also have a \"serialize\" feature) for higher level handling.\r\n\r\n- Then, there's the question of how to implement the serialization logic. I think doing it by hand for those structs where it's not possible to derive automatically via `serde_derive` is quickly becoming cumbersome and error-prone, especially given that we should add the serialization logic for all architectures supported in `kvm-bindings`. Something like the solution that @aghecenco just mentioned looks quite promising. By looking at each struct as a sequence of bytes we lose some expressivity in the serialized form, but we gain a lot of flexibility in the generic implementation that can easily be attached to any object. I think it's easiest to have a trait along the lines of (just some pseudocode very similar to Alexandra's example):\r\n\r\n```rust\r\ntrait Foo: Sized + Copy {\r\n   fn from_byte_slice(bytes: &[u8]) -> Self {\r\n      assert_eq!(mem::size_of::<Self>, bytes.len());\r\n      unsafe { ptr::read_unaligned(bytes as *const u8 as *const Self) }\r\n   }\r\n\r\n   fn as_byte_slice(&self) -> &[u8] {\r\n      unsafe { slice::from_raw_parts(self as *const Self as *const u8, mem::size_of::<Self>() }\r\n   }\t\r\n}\r\n```\r\n \r\nThe advantage of using a trait is that we can add the implementations \r\n\r\n```rust\r\nimpl<T: Foo> Serialize for T {\r\n\t...\r\n}\r\n\r\nimpl<T: Foo> Deserialize for T {\r\n\t...\r\n}\r\n\r\n```\r\n\r\nAnd then, since all the `Foo` methods have a default implementation, we can simply tag all types we'd like to have the serialization implemented for with `impl Foo for TypeName {}` (this can be gated by `#[cfg_attr(feature = \"serialize\"]`, etc).\r\n\r\n- There are some concerns regarding the overall versioning aspect for serialized data, but they look addressable while still being generic. I guess this should turn into a separate conversation at some point.\r\n\r\n", "updated_at": "2019-08-07T11:26:10Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/519055964", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-519055964", "created_at": "2019-08-07T11:26:10Z", "id": 519055964, "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTA1NTk2NA=="}, {"user": {"following_url": "https://api.github.com/users/aghecenco/following{/other_user}", "url": "https://api.github.com/users/aghecenco", "site_admin": false, "gists_url": "https://api.github.com/users/aghecenco/gists{/gist_id}", "node_id": "MDQ6VXNlcjIwMzU4Mjk=", "starred_url": "https://api.github.com/users/aghecenco/starred{/owner}{/repo}", "gravatar_id": "", "id": 2035829, "events_url": "https://api.github.com/users/aghecenco/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/2035829?v=4", "login": "aghecenco", "repos_url": "https://api.github.com/users/aghecenco/repos", "subscriptions_url": "https://api.github.com/users/aghecenco/subscriptions", "followers_url": "https://api.github.com/users/aghecenco/followers", "html_url": "https://github.com/aghecenco", "received_events_url": "https://api.github.com/users/aghecenco/received_events", "type": "User", "organizations_url": "https://api.github.com/users/aghecenco/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "@jiangliu @alexandruag please take another look. I changed...well, everything.\r\n* instead of deriving `Serialize` and `Deserialize`, each `struct` and `union` *explicitly* `impl`s them, serializing and deserializing its inner byte representation as a `&[u8]`.\r\n* instead of a Python script that adds the `#[derive]`s, all the code is autogenerated at build time from `build.rs`.\r\n* all kernel versions and architectures are autodetected and handled.\r\n* `serde` and [`serde_bytes`](https://crates.io/crates/serde_bytes) (TLDR efficient byte array (de)serialization support) are conditionally compiled in, activated by the `with_serde` feature.", "updated_at": "2019-08-28T15:05:22Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/525787288", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-525787288", "created_at": "2019-08-28T15:05:06Z", "id": 525787288, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTc4NzI4OA=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "Hi all,\r\n    Sorry for late reply. I have tried another way to tweak the #[derive(Serialize, Deserialize)] macros, and the result seems good enough for discussion, it seems lighter than the build.rs solution:)\r\nPlease take a look at my personal repo at: https://github.com/jiangliu/vmm-serde\r\nAnd the change to the latest implementation from aghecenco(https://github.com/aghecenco/kvm-bindings/tree/serde) is small as:\r\n```\r\ndiff --git a/Cargo.toml b/Cargo.toml\r\nindex 02f8c5d..64b6b96 100644\r\n--- a/Cargo.toml\r\n+++ b/Cargo.toml\r\n@@ -12,9 +12,9 @@ build = \"build.rs\"\r\n [features]\r\n kvm-v4_14_0 = []\r\n kvm-v4_20_0 = []\r\n-with_serde = [\"libc\", \"serde\", \"serde_bytes\"]\r\n+with_serde = [\"libc\", \"vmm-serde\", \"serde_bytes\"]\r\n\r\n [dependencies]\r\n libc =  { version = \">=0.2.39\", optional = true }\r\n-serde = { version = \">=1.0.27\", optional = true }\r\n+vmm-serde = { path = \"./vmm-serde\", features = [\"serde_derive\"], optional = true }\r\n serde_bytes = { version = \">=0.11.2\", optional = true }\r\ndiff --git a/serialization/header.rs.txt b/serialization/header.rs.txt\r\nindex b664e90..77624f6 100644\r\n--- a/serialization/header.rs.txt\r\n+++ b/serialization/header.rs.txt\r\n@@ -4,8 +4,8 @@\r\n use std::mem;\r\n use std::ptr;\r\n\r\n-use serde::de::{Deserialize, Deserializer};\r\n-use serde::{Serialize, Serializer};\r\n+use vmm_serde::de::{Deserialize, Deserializer};\r\n+use vmm_serde::{Serialize, Serializer};\r\n use serde_bytes::ByteBuf;\r\n\r\n fn serialize_ffi<T>(something: &T) -> ByteBuf {\r\ndiff --git a/src/lib.rs b/src/lib.rs\r\nindex c77bae3..ed21c0c 100644\r\n--- a/src/lib.rs\r\n+++ b/src/lib.rs\r\n@@ -8,7 +8,7 @@\r\n #[cfg(feature = \"with_serde\")]\r\n extern crate libc;\r\n #[cfg(feature = \"with_serde\")]\r\n-extern crate serde;\r\n+extern crate vmm_serde;\r\n #[cfg(feature = \"with_serde\")]\r\n extern crate serde_bytes;\r\n\r\n```", "updated_at": "2019-10-15T14:36:59Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/529429031", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-529429031", "created_at": "2019-09-09T11:33:17Z", "id": 529429031, "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTQyOTAzMQ=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "It seems we could use proc_macro_derive() to achieve the same goal with build_serde.rs, it may be simpler and reused by crates. Should we have a try?", "updated_at": "2019-09-09T13:56:13Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/529486846", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-529486846", "created_at": "2019-09-09T13:56:13Z", "id": 529486846, "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTQ4Njg0Ng=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "@aghecenco @alexandruag \r\nSorry for late reply:)\r\n- I like the idea of adding \"derive(Serialize, Deserialize)\" by script from the  first version, it clearly states what traits each data struct implements.\r\n- I like the `serde_bytes` based implementation from the second version too.\r\n- And I also want to build a serde infrastructure for the rust-vmm project. It may be used crates other than kvm-bindings, and helps to implement snapshot, live migration and live upgrade.\r\nSo I have combined your first and second versions and implement derive(SerializeFfi, DeserializeFfi, DeserializeFfiFam) by `proc_macro_derive`.\r\n\r\nI have push the new vmm-serde crate to my personal repo at: https://github.com/jiangliu/vmm-serde\r\nand crate addition proposal at: https://github.com/rust-vmm/community/issues/76\r\nand a minor enhancement to vmm-sys-util::fam: https://github.com/rust-vmm/vmm-sys-util/pull/42\r\n\r\nWith all this ready, it becomes easy to serialize/deserialize data structs generated by bindgen.\r\nAn example as below:\r\n```rust\r\n    #[cfg(feature = \"serde_derive_ffi\")]\r\n    #[test]\r\n    fn ffi_test_ffi_fam_struct() {\r\n        #[repr(C)]\r\n        #[derive(Default, Debug, SerializeFfi, DeserializeFfi)]\r\n        pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);\r\n        impl<T> __IncompleteArrayField<T> {\r\n            #[inline]\r\n            pub fn new() -> Self {\r\n                __IncompleteArrayField(::std::marker::PhantomData, [])\r\n            }\r\n        }\r\n\r\n        #[repr(C)]\r\n        #[derive(Debug, Default, SerializeFfi, DeserializeFfiFam)]\r\n        pub struct kvm_msrs {\r\n            pub nmsrs: u32,\r\n            pub pad: u32,\r\n            pub entries: __IncompleteArrayField<u64>,\r\n        }\r\n\r\n        impl SizeofFamStruct for kvm_msrs {\r\n            fn size_of(&self) -> usize {\r\n                self.nmsrs as usize * std::mem::size_of::<u64>() + std::mem::size_of::<Self>()\r\n            }\r\n        }\r\n\r\n        let data = vec![\r\n            kvm_msrs {\r\n                nmsrs: 1,\r\n                pad: 0,\r\n                entries: __IncompleteArrayField::new(),\r\n            },\r\n            kvm_msrs {\r\n                nmsrs: 0x1,\r\n                pad: 0x2,\r\n                entries: __IncompleteArrayField::new(),\r\n            },\r\n        ];\r\n        let ser = serde_json::to_string(&data[0]).unwrap();\r\n        let mut deserializer = serde_json::Deserializer::from_str(&ser);\r\n        let content: Vec<kvm_msrs> = kvm_msrs::deserialize(&mut deserializer).unwrap();\r\n        // let decoded: FamStructWrapper<kvm_msrs> = content.into();\r\n\r\n        assert_eq!(content[0].nmsrs, 1);\r\n        assert_eq!(content[0].pad, 0);\r\n    }\r\n```\r\n\r\nAnd the Cargo.toml look like:\r\n```\r\n[features]\r\nkvm-v4_14_0 = []\r\nkvm-v4_20_0 = []\r\nwith_serde = [\"serde\", \"vmm-serde/serde_derive_ffi\"]\r\n\r\n[dependencies]\r\nserde = { version = \">=1.0.27\", optional = true }\r\nvmm-serde = { git = \"https://github.com/jiangliu/vmm-serde\", branch = \"v1\" }\r\n```", "updated_at": "2019-09-17T07:00:19Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/532088929", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-532088929", "created_at": "2019-09-17T07:00:19Z", "id": 532088929, "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjA4ODkyOQ=="}, {"user": {"following_url": "https://api.github.com/users/aghecenco/following{/other_user}", "url": "https://api.github.com/users/aghecenco", "site_admin": false, "gists_url": "https://api.github.com/users/aghecenco/gists{/gist_id}", "node_id": "MDQ6VXNlcjIwMzU4Mjk=", "starred_url": "https://api.github.com/users/aghecenco/starred{/owner}{/repo}", "gravatar_id": "", "id": 2035829, "events_url": "https://api.github.com/users/aghecenco/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/2035829?v=4", "login": "aghecenco", "repos_url": "https://api.github.com/users/aghecenco/repos", "subscriptions_url": "https://api.github.com/users/aghecenco/subscriptions", "followers_url": "https://api.github.com/users/aghecenco/followers", "html_url": "https://github.com/aghecenco", "received_events_url": "https://api.github.com/users/aghecenco/received_events", "type": "User", "organizations_url": "https://api.github.com/users/aghecenco/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/4", "body": "Closing in favor of #11.", "updated_at": "2019-11-18T15:14:40Z", "url": "https://api.github.com/repos/rust-vmm/kvm-bindings/issues/comments/555059114", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/kvm-bindings/pull/4#issuecomment-555059114", "created_at": "2019-11-18T15:14:40Z", "id": 555059114, "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTA1OTExNA=="}]