[{"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "@jiangliu PTAL", "updated_at": "2019-08-26T21:05:44Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/525032390", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-525032390", "created_at": "2019-08-26T21:05:44Z", "id": 525032390, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTAzMjM5MA=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "@alexandruag @andreeaflorescu @bonzini @chao-p @jiangliu @sameo @rbradford \r\nBased on both #42 and #43 pull requests, I ran into issues leading to design questions, and I would like to make sure we discuss and agree on some design decisions before I can actually proceed further.\r\n\r\n1. This first point is about the ability to add new regions to an existing `GuestMemoryMmap`. This could be needed by the caller's code in order to hotplug some more RAM regions, or even in order to add other types of regions after the RAM regions have been created. Based on the current code, there is no reason to use an `Arc` for all the memory regions (`Arc<Vec<GuestRegionMmap>>`) contained in `GuestMemoryMmap`. When adding the code for dynamically adding new regions, this would mean we need to introduce a lock (`RwLock` or `Mutex`), which would add overhead and complexity even when VMM implementations like Firecracker don't need to add regions dynamically.\r\n__Solution:__ Change `Arc<Vec<GuestRegionMmap>>` into `Vec<GuestRegionMmap>`.\r\n\r\n2. Based on the solution proposed from __1.__, we need to be very careful with each `MmapRegion` instance representing a mapping, as we don't want to drop it, as this would cause the `Drop` implementation to be called, which would perform the unmapping (`munmap`) of this region.\r\n\r\n3. There is a more fundamental question about `vm-memory`, which is to understand if we want this crate to handle RAM regions exclusively or other memory region types too. This is important because it raises the question about the meaning behind some functions like `end_addr()`, assuming we want the end address of the RAM.\r\nThe rationales behind this question are about supporting or not things like `virtio-pmem` and `virtio-fs`, which must `mmap` some regions shared with the guest.\r\n__Solutions:__\r\na. We choose to introduce types and we take appropriate actions regarding the meaning of some functions\r\nb. We expect the VMM to deal with multiple instances of `GuestMemoryMmap`. It would be the VMM's responsibility to have one instance per type.\r\nc. We decide that `vm-memory` should be exclusively used for RAM regions.\r\n\r\nPlease let me know what you think about all this, it's important to shape the future of this crate and its integration into VMMs.", "updated_at": "2019-08-28T17:31:54Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/525844747", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-525844747", "created_at": "2019-08-28T17:31:54Z", "id": 525844747, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTg0NDc0Nw=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "@jiangliu PTAL", "updated_at": "2019-09-03T17:38:57Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/527562593", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-527562593", "created_at": "2019-09-03T17:38:57Z", "id": 527562593, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzU2MjU5Mw=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "@sameo PTAL", "updated_at": "2019-09-03T17:39:13Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/527562705", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-527562705", "created_at": "2019-09-03T17:39:13Z", "id": 527562705, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzU2MjcwNQ=="}, {"user": {"following_url": "https://api.github.com/users/dagrh/following{/other_user}", "url": "https://api.github.com/users/dagrh", "site_admin": false, "gists_url": "https://api.github.com/users/dagrh/gists{/gist_id}", "node_id": "MDQ6VXNlcjYzMjk3NjA=", "starred_url": "https://api.github.com/users/dagrh/starred{/owner}{/repo}", "gravatar_id": "", "id": 6329760, "events_url": "https://api.github.com/users/dagrh/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/6329760?v=4", "login": "dagrh", "repos_url": "https://api.github.com/users/dagrh/repos", "subscriptions_url": "https://api.github.com/users/dagrh/subscriptions", "followers_url": "https://api.github.com/users/dagrh/followers", "html_url": "https://github.com/dagrh", "received_events_url": "https://api.github.com/users/dagrh/received_events", "type": "User", "organizations_url": "https://api.github.com/users/dagrh/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "The question of a 'ram region' gets pretty thorny at times; do you mean ROM is included? Do you mean anything with a real piece of host memory pointer is included?\r\nIf you're updating the sizes then what are the rules for a caller iterating over it?\r\n(Also were you trying to keep regions in order?)\r\n", "updated_at": "2019-09-03T17:53:23Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/527568169", "author_association": "CONTRIBUTOR", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-527568169", "created_at": "2019-09-03T17:53:23Z", "id": 527568169, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzU2ODE2OQ=="}, {"user": {"following_url": "https://api.github.com/users/sboeuf/following{/other_user}", "url": "https://api.github.com/users/sboeuf", "site_admin": false, "gists_url": "https://api.github.com/users/sboeuf/gists{/gist_id}", "node_id": "MDQ6VXNlcjIyODkwNDEz", "starred_url": "https://api.github.com/users/sboeuf/starred{/owner}{/repo}", "gravatar_id": "", "id": 22890413, "events_url": "https://api.github.com/users/sboeuf/events{/privacy}", "avatar_url": "https://avatars3.githubusercontent.com/u/22890413?v=4", "login": "sboeuf", "repos_url": "https://api.github.com/users/sboeuf/repos", "subscriptions_url": "https://api.github.com/users/sboeuf/subscriptions", "followers_url": "https://api.github.com/users/sboeuf/followers", "html_url": "https://github.com/sboeuf", "received_events_url": "https://api.github.com/users/sboeuf/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sboeuf/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "@dagrh \r\n>The question of a 'ram region' gets pretty thorny at times; do you mean ROM is included?\r\n\r\n`ROM` can be a specific type of memory region if we somehow have the need to make the distinction between the two.\r\n\r\n>Do you mean anything with a real piece of host memory pointer is included?\r\n\r\nSo far, that's my understanding of what are the memory regions.\r\n\r\n>If you're updating the sizes then what are the rules for a caller iterating over it? (Also were you trying to keep regions in order?)\r\n\r\nWell the iterating should be fine as long as we introduce some types. And then based on the type and the base address, the caller should know what needs to be done.\r\nAnd I think that's joining my question about what is the assumption regarding the behavior of vm-memory.", "updated_at": "2019-09-03T18:32:55Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/527583358", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-527583358", "created_at": "2019-09-03T18:32:55Z", "id": 527583358, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzU4MzM1OA=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "In my original thoughts, the GuestMemory just provides mechanisms to access guest's memory. We may build another abstraction AddressSpace, which holds all resources present in the guest's system bus.\r\nThen we may generate GuestMemory objects from  the AddressSpace object on demand.\r\nAnd the type of resources (the proposed `tag`) should be an attributes of entries in the AddressSpace object.", "updated_at": "2019-09-04T01:29:20Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/527701633", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-527701633", "created_at": "2019-09-04T01:29:20Z", "id": 527701633, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzcwMTYzMw=="}, {"user": {"following_url": "https://api.github.com/users/rbradford/following{/other_user}", "url": "https://api.github.com/users/rbradford", "site_admin": false, "gists_url": "https://api.github.com/users/rbradford/gists{/gist_id}", "node_id": "MDQ6VXNlcjU4ODIyNA==", "starred_url": "https://api.github.com/users/rbradford/starred{/owner}{/repo}", "gravatar_id": "", "id": 588224, "events_url": "https://api.github.com/users/rbradford/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/588224?v=4", "login": "rbradford", "repos_url": "https://api.github.com/users/rbradford/repos", "subscriptions_url": "https://api.github.com/users/rbradford/subscriptions", "followers_url": "https://api.github.com/users/rbradford/followers", "html_url": "https://github.com/rbradford", "received_events_url": "https://api.github.com/users/rbradford/received_events", "type": "User", "organizations_url": "https://api.github.com/users/rbradford/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/43", "body": "@jiangliu / @dagrh I think you might be conflating the issue that is trying to be resolved in #42 with this one. Whatever the ideal design may be as it currently stands once the `GuestMemoryMmap` is constructed it is not possible to add any more regions to it. It supports adding multiple at the start but there are situations such as virtio-fs where they need to be added later.\r\n\r\nWe want to start using the support that @sboeuf added in cloud-hypervisor so that we can benefit from the `GuestMemoryMmap` managing our virtio-fs and virtio-pmem regions so that we don't have to.\r\n\r\nPlease consider reviewing it from the current implementation and behavioural perspective rather than a possible future ideal as this is a feature we need and hence why it's been proposed.", "updated_at": "2019-09-04T16:01:39Z", "url": "https://api.github.com/repos/rust-vmm/vm-memory/issues/comments/527968486", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-memory/pull/43#issuecomment-527968486", "created_at": "2019-09-04T16:01:28Z", "id": 527968486, "node_id": "MDEyOklzc3VlQ29tbWVudDUyNzk2ODQ4Ng=="}]