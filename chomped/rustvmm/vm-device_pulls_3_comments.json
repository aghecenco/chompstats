[{"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@liujing2  Could you please add a `.buildkite/pipeline.yml` file to trigger the CI? The buildkite agent stuff has been added so simply adding this file should work (famous last words...).", "updated_at": "2019-06-06T12:05:33Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/496788326", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-496788326", "created_at": "2019-05-29T05:20:08Z", "id": 496788326, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5Njc4ODMyNg=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@sameo  Sure. ", "updated_at": "2019-05-29T06:46:54Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/496807622", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-496807622", "created_at": "2019-05-29T06:46:54Z", "id": 496807622, "node_id": "MDEyOklzc3VlQ29tbWVudDQ5NjgwNzYyMg=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@serban300 @andreeaflorescu  @sameo  Two more patches for the naming issue was updated, Thanks.", "updated_at": "2019-06-13T14:33:59Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/501729692", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-501729692", "created_at": "2019-06-13T14:33:59Z", "id": 501729692, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMTcyOTY5Mg=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@sameo  All comments are addressed. ", "updated_at": "2019-06-20T09:01:36Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/503943088", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-503943088", "created_at": "2019-06-20T09:01:36Z", "id": 503943088, "node_id": "MDEyOklzc3VlQ29tbWVudDUwMzk0MzA4OA=="}, {"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@serban300 @jiangliu @zachreizner I think this one is ready to be reviewed, could you PTAL?", "updated_at": "2019-06-27T08:37:55Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/506251217", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-506251217", "created_at": "2019-06-27T08:37:55Z", "id": 506251217, "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjI1MTIxNw=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "Great, will review it soon:)", "updated_at": "2019-06-27T08:50:27Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/506255726", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-506255726", "created_at": "2019-06-27T08:50:27Z", "id": 506255726, "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjI1NTcyNg=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "Seems more thoughts are needed about the DeviceManager abstraction. Especially the way to support both simple VMM like firecracker and full functionally vmm like qemu, they have different requirements.", "updated_at": "2019-06-28T12:43:42Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/506720287", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-506720287", "created_at": "2019-06-28T12:43:42Z", "id": 506720287, "node_id": "MDEyOklzc3VlQ29tbWVudDUwNjcyMDI4Nw=="}, {"user": {"following_url": "https://api.github.com/users/sameo/following{/other_user}", "url": "https://api.github.com/users/sameo", "site_admin": false, "gists_url": "https://api.github.com/users/sameo/gists{/gist_id}", "node_id": "MDQ6VXNlcjEwNDM4NjM=", "starred_url": "https://api.github.com/users/sameo/starred{/owner}{/repo}", "gravatar_id": "", "id": 1043863, "events_url": "https://api.github.com/users/sameo/events{/privacy}", "avatar_url": "https://avatars2.githubusercontent.com/u/1043863?v=4", "login": "sameo", "repos_url": "https://api.github.com/users/sameo/repos", "subscriptions_url": "https://api.github.com/users/sameo/subscriptions", "followers_url": "https://api.github.com/users/sameo/followers", "html_url": "https://github.com/sameo", "received_events_url": "https://api.github.com/users/sameo/received_events", "type": "User", "organizations_url": "https://api.github.com/users/sameo/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "> Seems more thoughts are needed about the DeviceManager abstraction. Especially the way to support both simple VMM like firecracker and full functionally vmm like qemu\r\n\r\nThe current design is driven by the assumption that the VMM will be the central resource allocation point, which is true for firmware-less and simple VMMs like e.g. Firecracker or to some extend crosvm. It's also a little static at the moment as it does not yet allow for device resources reprogramming (e.g. PCI).\r\nHowever, I think this is a good starting point and it conveys the design of what both Firecracker and crosvm do. From there, we can extend the device manager API to support more complex use cases.\r\n\r\n> they have different requirements.\r\n\r\nMaybe we could try to enumerate those requirements and see if the current PR could eventually also handle them. Besides device driven resources re-allocation (aka reprogramming), what else do you think we should take into account?", "updated_at": "2019-07-01T09:07:29Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/507182184", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-507182184", "created_at": "2019-07-01T09:07:29Z", "id": 507182184, "node_id": "MDEyOklzc3VlQ29tbWVudDUwNzE4MjE4NA=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@sameo @jiangliu @andreeaflorescu \r\nPR is updated. Some comments are not resolved and keep them as it is for now. Would update more after more discussion. Mark as follows.\r\n- set_resources() keeps `res` as reference.\r\n- Arc<Mutex<>> for each `Device` is kept because we find some problems as [mentioned](https://github.com/rust-vmm/vm-device/pull/3#discussion_r300237538)\r\n- Whether device resources need be set to original status when unhotplug is still in discussion. Start() and Stop() functions naming are inside this one.", "updated_at": "2019-07-04T07:35:25Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/508372177", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-508372177", "created_at": "2019-07-04T07:27:18Z", "id": 508372177, "node_id": "MDEyOklzc3VlQ29tbWVudDUwODM3MjE3Nw=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "I looked a bit more at the design of the DeviceManager as well as the SystemAllocator.\r\n\r\nRight now the SystemAllocator is not very flexible because:\r\n1. it has a static list of resources it manages, specified as fields of the SystemAllocator structure.\r\n2. each resource allocator (io_address_space, mmio_address_space, ...) is held in an Arc<Mutex<..>> which makes sense for a multi-threaded VMM, but not really for Firecracker. This might not be a huge problem depending on how fast the operation on `Arc` are, but this still needs to be taken into account.\r\n\r\nI tried to experiment a bit with creating a `ResourceAllocator` trait that could fix point 1, but it is complicating the code a bit more than is necessary. I changed the `SystemAllocator` to keep a hashmap of all `ResourceAllocator` objects as follows:\r\n\r\n```rust\r\n/// Trait for defining resources which can be allocated.\r\n///\r\n/// This trait needs to be implemented by all resources that are to be managed\r\n/// by a `ResourceAllocator`. Example of resources are Guest Addresses, IRQ numbers and others.\r\npub trait Resource {}\r\n\r\n/// Trait for defining a resource allocator.\r\n///\r\n/// Resources which should implement a resource allocator are IRQs, Virtual Memory, MMIO, and\r\n/// other resources for which you have a space definition (like an interval of valid addresses)\r\n/// and you can want to make sure that objects in the defined space are unique.\r\npub trait ResourceAllocator {\r\n    fn allocate(&mut self) -> Result<Box<Resource>, Error>;\r\n    fn free(&mut self) -> Result<(), Error>;\r\n}\r\n\r\nstruct SystemAllocator {\r\n    // The SystemAllocator resources are kept in a hashmap so that it is agnostic to the\r\n    // number and type of resources it manages. For ease of use, the hashmap key should be\r\n    // the name of the resource (for example \"irq_allocator\").\r\n    resource_allocators: HashMap<String, Box<dyn ResourceAllocator>>,\r\n}\r\n\r\nimpl SystemAllocator {\r\n    pub fn new() -> Self {\r\n        SystemAllocator {\r\n            resource_allocators: HashMap::new()\r\n        }\r\n    }\r\n\r\n    /// Add a resource allocator to be managed by `SystemAllocator`.\r\n    // TODO: return result;\r\n    pub fn add_allocator(&mut self, allocator_id: String, allocator: Box<ResourceAllocator>) {\r\n        // TODO: key does not exist?\r\n        self.resource_allocators.insert(allocator_id, allocator);\r\n    }\r\n\r\n    /// Allocate a new resource in the allocator specified by `allocator_id`.\r\n    pub fn allocate(&mut self, allocator_id: String) -> Result<Box<Resource>, Error> {\r\n        self.resource_allocators.get_mut(&allocator_id).unwrap().allocate(None)\r\n    }\r\n}\r\n```\r\n\r\nTo test the new interface of the SystemAllocator, I did a dummy test with `IdAllocator`:\r\n\r\n```rust\r\n// We can't use the raw value `u32` because the `ResourceAllocator` trait can be used by multiple resources.\r\n// For this reason we use `Resource` in `ResourceAllocator` and we implement `Resource` for `Id`.\r\npub struct Id(pub u32);\r\nimpl Resource for Id {}\r\n\r\npub struct IdAllocator {\r\n    start: Id,\r\n    end: Id,\r\n    used_map: Vec<Id>,\r\n}\r\n\r\nimpl ResourceAllocator for IdAllocator {\r\n    fn allocate(&mut self) -> Result<Box<Resource>, Error> {\r\n        self.used_map.push(Id(42));\r\n        Ok(Box::new(Id(42)))\r\n    }\r\n\r\n    fn free(&mut self) -> Result<(), Error> {\r\n        unimplemented!()\r\n    }\r\n}\r\n\r\n```\r\n\r\nThis implementation is not thread safe, so the `SystemAllocator` would need to be placed in an `Arc` which might make the code inefficient for multi-threaded VMMs.\r\n\r\nI honestly couldn't find a pattern that could work for multiple VMM implementations (Firecracker, CrosVM, Cloud Hypervisor) and I am starting to think that maybe it is a better idea to not make the `vm-device` depend on the implementation of `vm-allocator`. Instead of having `DeviceManager` call into `SystemAllocator`, we can pass a callback function to `register_device` and `unregister_device`. With this approach in Firecracker we would end up with a minimal function and for projects that need  complex resource management, the VMM can pass functions from the vm-allocator. This would require the vm-allocator to be a separate crate.\r\n\r\nWhat do you all think?\r\n\r\nP.S. I haven't done an in-depth review for the `DeviceManager` code. ", "updated_at": "2019-07-10T15:52:17Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/510120226", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-510120226", "created_at": "2019-07-10T15:52:17Z", "id": 510120226, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDEyMDIyNg=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "Just discovered that there's a leftover travis configuration file. That should be deleted as well (.travis.yml)", "updated_at": "2019-07-12T10:02:29Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/510829786", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-510829786", "created_at": "2019-07-12T10:02:29Z", "id": 510829786, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDgyOTc4Ng=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@andreeaflorescu I like the idea of letting DeviceManager release reference of SystemAllocator! \r\n\r\nAfter thinking deep and experiments, I indeed found some key problems of design and let's discuss in details.\r\n\r\nFirstly, let's say some necessary demands of design.\r\n- To get raw value of each `Resource` request, it could be defined as,\r\n```rust\r\npub trait Resource\r\n{\r\n    /// Type of the resource raw value, like u32 for Id.\r\n    type V;\r\n    /// Get the name describing the resource type.\r\n    fn name(&self) -> String;\r\n    fn raw_value(&self) -> Self::V;\r\n}\r\n```\r\n- `ResourceAllocator` needs a parameter of `Resource` to allocate a specific one. With associated type V, `Resource` could not be `Box<Resource>` because V needs to be specified. So we use bounding.\r\n```rust\r\npub trait ResourceAllocator {\r\n    fn name(&self) -> String;\r\n    fn allocate<R: Resource>(\r\n        &mut self,\r\n        res: Option<Box<R>>,\r\n   ) -> Result<Box<R>, Error>;\r\n    ...\r\n}\r\n\r\nimpl ResourceAllocator for Id {\r\n    ...\r\n}\r\n```\r\nBut the problem is, compiler couldn't know the detailed type of input `res.raw_value()`, but only expects type `<R as Resource>::V`, because input is trait. So, we actually could not analyse `res` in the allocate() function to do anything. Also, this makes things dangerous because no limited input type. (This has workaround to use name() to check Resource and ResourceAllocator)\r\n\r\nMeanwhile, considering SystemAllocator::allocate() which returns `Result<Box<Resource<V=?>>>`, we don't know the right value for each allocator. I don't think this has workaround :(\r\n\r\n========\r\nSince the key is we want to keep abstraction in high level but compiler could not know details, I tried to split all resources into two: `AddrResourceAllocator` for PIO and MMIO and `UIntResourceAllocator` for irq and device_id. So far, I didn't find any other resources needed by system allocator.\r\n\r\n```rust\r\npub trait UIntResourceAllocator {\r\n    /// Unsigned integer resource allocation.\r\n    fn allocate(\r\n        &mut self,\r\n        res: Option<Box<Resource<V = u32>>>,\r\n   ) -> Result<Box<Resource<V = u32>>, Error>;\r\n}\r\n\r\npub trait AddrResourceAllocator {\r\n    /// Address resource allocation.\r\n    fn allocate(\r\n        &mut self,\r\n        res: Option<Box<Resource<V = GuestAddress>>>,\r\n    ) -> Result<Box<Resource<V = GuestAddress>>, Error>;\r\n}\r\n\r\nimpl UIntResourceAllocator for IdAllocator {\r\n    fn allocate(&mut self, resource: Option<Box<Resource<V=u32>>>) -> Result<Box<Resource<V=u32>>> {\r\n        // resource is specified, resource.raw_value() is u32\r\n    }\r\n```\r\nThis requires SystemAllocator to have two members and two functions for each. \r\n```rust\r\npub struct SystemAllocator {\r\n    addr_resource_alloc: HashMap<String, Box<AddrResourceAllocator>>,\r\n    uint_resource_alloc: HashMap<String, Box<UIntResourceAllocator>>,\r\n}\r\n\r\npub fn add_uint_allocator(&mut self, allocator_name: String, allocator: Box<UIntResourceAllocator>) -> Result<()> {...}\r\n\r\npub fn allocate_uint(&mut self, _allocator_id: String) -> Result<Box<Resource<V=u32>>> {\r\n    Ok(Box::new(Id(10)))\r\n}\r\n```\r\nThe separate workaround can help us specify inner type, and return value can be cast to specific type successfully. Simple usage as follows.\r\n```rust\r\n    #[test]\r\n    fn test_allocate() -> Result<(), Error> {\r\n        let mut sys = SystemAllocator::new(); // Arc<Mutex<>> protection outside in vmm\r\n        let id_allocator = IdAllocator::new(Id(1), Id(100)).ok_or(Error::Exist)?;\r\n        let id_name = id_allocator.name();\r\n        sys.add_uint_allocator(id_name.clone(), Box::new(id_allocator));\r\n\r\n        // Here simply call directly\r\n        let id = sys.allocate_uint(id_name.clone())?;\r\n        assert_eq!(id.raw_value(), 10);\r\n        Ok(())\r\n    }\r\n```\r\n\r\nAlthough this makes SystemAllocator ugly to manually check which kind of resource it should call, it helps solve many problems above.  I haven't tried GuestAddress type and not sure if there would be other issues with this method.\r\n\r\nWhat do you think?\r\n", "updated_at": "2019-07-12T11:33:41Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/510849382", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-510849382", "created_at": "2019-07-12T11:16:54Z", "id": 510849382, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDg0OTM4Mg=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@liujing2 I think we should first separate vm-allocator from vm-device and design them independently.\r\n\r\nFor the vm-allocator instead of exporting a `SystemAllocator` structure I would see it more like a trait, but I would first need to run some more experiments to see how would that play out. The `SystemAllocator` is then implemented by each VMM (Firecracker, Cloud Hypervisor, CrosVM, others) because only the VMM knows exactly what resources it will manage.\r\n\r\nIn rust-vmm/vm-allocator\r\n```rust\r\npub trait SystemAllocator {\r\n   pub fn add_allocator(...);\r\n   pub fn allocate(...);\r\n}\r\n```\r\n\r\nIn Cloud Hypervisor:\r\n```rust\r\nstruct VmmSystemAllocator {\r\n   io_address_allocator: Arc<Mutex<IoAddressAllocator>>,\r\n   irq_allocator: ....\r\n```\r\n}\r\n\r\nThis would make it easier because then the SystemAllocator doesn't need to be generic and work with HashMap or Vec of ResourceAllocator.\r\n\r\nI am doing some prototypes and will keep you posted. If we separate the vm-allocator from the vm-device we should be able to keep working on the vm-device and maybe merge it sooner?\r\n\r\nLater Edit: VmmSystemAllocator should implement SystemAllocator.", "updated_at": "2019-07-12T13:41:55Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/510889809", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-510889809", "created_at": "2019-07-12T13:38:36Z", "id": 510889809, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDg4OTgwOQ=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "I have created a very rough prototype. If people like the idea I'll continue to work on it an improve it, but for now it doesn't even build.\r\n\r\nThe vm-allocator has the following traits:\r\n- `ResourceAllocator` which uses a generic type that implements `Resource`\r\n- `Resource` just a dummy empty trait used to make `ResourceAllocator` generic\r\n\r\nAnd the following implementations:\r\n- `Id` implements `Resource` and it's used by `IdResourceAllocator`\r\n- `IdResourceAllocator` implements `ResourceAllocator` and basically is used for allocating u32 values which are wrapped in an `Id`.\r\n\r\nMy view of the vm-allocator would be to have a few more `ResourceAllocator` implementations like an allocator for guest memory (which would work with addresses) and other similar allocators (like MMIO?).\r\n\r\nThe VMM implementations would define the `SystemAllocator` as they see fit for their usecase. The code in `SystemAllocator` should be rather simple: some defines of allocators wrapped in Arc<Mutex>> (or not in the case of Firecracker) and wrappers over allocate() functions exported by vm-allocator.\r\n\r\nhttps://github.com/andreeaflorescu/vm-allocator", "updated_at": "2019-07-12T15:13:55Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/510924250", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-510924250", "created_at": "2019-07-12T15:13:55Z", "id": 510924250, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDkyNDI1MA=="}, {"user": {"following_url": "https://api.github.com/users/jiangliu/following{/other_user}", "url": "https://api.github.com/users/jiangliu", "site_admin": false, "gists_url": "https://api.github.com/users/jiangliu/gists{/gist_id}", "node_id": "MDQ6VXNlcjE5MzE1MTY=", "starred_url": "https://api.github.com/users/jiangliu/starred{/owner}{/repo}", "gravatar_id": "", "id": 1931516, "events_url": "https://api.github.com/users/jiangliu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/1931516?v=4", "login": "jiangliu", "repos_url": "https://api.github.com/users/jiangliu/repos", "subscriptions_url": "https://api.github.com/users/jiangliu/subscriptions", "followers_url": "https://api.github.com/users/jiangliu/followers", "html_url": "https://github.com/jiangliu", "received_events_url": "https://api.github.com/users/jiangliu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/jiangliu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "> I have created a very rough prototype. If people like the idea I'll continue to work on it an improve it, but for now it doesn't even build.\r\n> \r\n> The vm-allocator has the following traits:\r\n> \r\n> * `ResourceAllocator` which uses a generic type that implements `Resource`\r\n> * `Resource` just a dummy empty trait used to make `ResourceAllocator` generic\r\n> \r\n> And the following implementations:\r\n> \r\n> * `Id` implements `Resource` and it's used by `IdResourceAllocator`\r\n> * `IdResourceAllocator` implements `ResourceAllocator` and basically is used for allocating u32 values which are wrapped in an `Id`.\r\n> \r\n> My view of the vm-allocator would be to have a few more `ResourceAllocator` implementations like an allocator for guest memory (which would work with addresses) and other similar allocators (like MMIO?).\r\n> \r\n> The VMM implementations would define the `SystemAllocator` as they see fit for their usecase. The code in `SystemAllocator` should be rather simple: some defines of allocators wrapped in Arc> (or not in the case of Firecracker) and wrappers over allocate() functions exported by vm-allocator.\r\n> \r\n> https://github.com/andreeaflorescu/vm-allocator\r\n\r\nThanks for quick PoC:)\r\nIt's more flexible by defining Traits and default implementations. But need more think about the way to declare allocation conditions(alginment, min, max etc).", "updated_at": "2019-07-12T16:03:18Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/510941746", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-510941746", "created_at": "2019-07-12T16:03:18Z", "id": 510941746, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMDk0MTc0Ng=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "> It's more flexible by defining Traits and default implementations. But need more think about the way to declare allocation conditions(alginment, min, max etc).\r\n\r\nYes, agree with @jiangliu . We need take care of not only allocation conditions, but also allocation request (a non-specific allocation request or a specific resource request). \r\n\r\n\r\n", "updated_at": "2019-07-15T07:02:09Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/511293516", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-511293516", "created_at": "2019-07-15T07:02:09Z", "id": 511293516, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTI5MzUxNg=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@jiangliu @liujing2 let's gather a list of requirements, preferably in the issue that was introducing the vm-allocator crate. We can than make a more informed decision about the design. On a high level, I would still like to have the functionality of the vm-allocator exported as both Trait and implementations.", "updated_at": "2019-07-15T07:23:18Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/511298189", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-511298189", "created_at": "2019-07-15T07:23:18Z", "id": 511298189, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTI5ODE4OQ=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@andreeaflorescu \r\nOne thing I'd like to explain is current PR doesn't mean to have vm-allocator crate inside vm-device crate, but they have strong dependency so one PR for easy review. Or else, I'd like to submit them as two crates' PRs instead :)\r\n\r\nConsidering your latest proposal, we need more think about the way vm-device::DeviceManager use the SystemAllocator trait or struct. \r\n\r\n- I am not sure what is the use of `SystemAllocator trait` and how its `allocate()` function implements. The only use I can imagine is for `DeviceManager`, and this is good. But I think a simple struct would help do either. \r\nBut for `allocate()`, each resources can't use a simply function if we don't put them into one container (e.g. hashmap or vec). Or else, several functions and callback need to have for `DeviceManager`.\r\n\r\nSo I guess some of my previous experiments and codes (compiled and can have a try) basing on your trait design and also with some modifications would make some sense. I'd like to post the patch here https://github.com/liujing2/vm-device/commit/6758deede187d33e1c62a2650ac5ff85981fbdb8 (https://github.com/liujing2/vm-device/tree/v8 based),  and wish that would provide some help to us.\r\n\r\n- Another comment is, later when people have other system level resources demand, vm-allocator still needs some new patches implementing that and might also in vm-device.\r\n\r\n\r\n\r\n", "updated_at": "2019-07-15T08:09:39Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/511308133", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-511308133", "created_at": "2019-07-15T08:03:36Z", "id": 511308133, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTMwODEzMw=="}, {"user": {"following_url": "https://api.github.com/users/liujing2/following{/other_user}", "url": "https://api.github.com/users/liujing2", "site_admin": false, "gists_url": "https://api.github.com/users/liujing2/gists{/gist_id}", "node_id": "MDQ6VXNlcjM5Njg0NjQ5", "starred_url": "https://api.github.com/users/liujing2/starred{/owner}{/repo}", "gravatar_id": "", "id": 39684649, "events_url": "https://api.github.com/users/liujing2/events{/privacy}", "avatar_url": "https://avatars1.githubusercontent.com/u/39684649?v=4", "login": "liujing2", "repos_url": "https://api.github.com/users/liujing2/repos", "subscriptions_url": "https://api.github.com/users/liujing2/subscriptions", "followers_url": "https://api.github.com/users/liujing2/followers", "html_url": "https://github.com/liujing2", "received_events_url": "https://api.github.com/users/liujing2/received_events", "type": "User", "organizations_url": "https://api.github.com/users/liujing2/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "> @jiangliu @liujing2 let's gather a list of requirements, preferably in the issue that was introducing the vm-allocator crate. We can than make a more informed decision about the design. On a high level, I would still like to have the functionality of the vm-allocator exported as both Trait and implementations.\r\n\r\nThanks for your proposal. It would be great to open a vm-allocator crate repo and discuss there. I'd like to post the PR again there for discussion.", "updated_at": "2019-07-15T08:05:48Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/511308689", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-511308689", "created_at": "2019-07-15T08:05:48Z", "id": 511308689, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTMwODY4OQ=="}, {"user": {"following_url": "https://api.github.com/users/andreeaflorescu/following{/other_user}", "url": "https://api.github.com/users/andreeaflorescu", "site_admin": false, "gists_url": "https://api.github.com/users/andreeaflorescu/gists{/gist_id}", "node_id": "MDQ6VXNlcjI4MTU5NDQ=", "starred_url": "https://api.github.com/users/andreeaflorescu/starred{/owner}{/repo}", "gravatar_id": "", "id": 2815944, "events_url": "https://api.github.com/users/andreeaflorescu/events{/privacy}", "avatar_url": "https://avatars0.githubusercontent.com/u/2815944?v=4", "login": "andreeaflorescu", "repos_url": "https://api.github.com/users/andreeaflorescu/repos", "subscriptions_url": "https://api.github.com/users/andreeaflorescu/subscriptions", "followers_url": "https://api.github.com/users/andreeaflorescu/followers", "html_url": "https://github.com/andreeaflorescu", "received_events_url": "https://api.github.com/users/andreeaflorescu/received_events", "type": "User", "organizations_url": "https://api.github.com/users/andreeaflorescu/orgs"}, "issue_url": "https://api.github.com/repos/rust-vmm/vm-device/issues/3", "body": "@liujing2 can I suggest that you split the functionality in vm-allocator in multiple PRs to make it easier to review? We can have:\r\n- one PR with trait definitions. The purpose of this PR would be to present the high level design of the crate. If we were to keep the design that I proposed, this PR would only have the following traits: Resource and ResourceAllocator.\r\n- one PR with a minimal implementation of the trait. This one would have an implementation for IdAllocator and maybe AddressAllocator.\r\n \r\nWhat do you say?", "updated_at": "2019-07-15T12:52:21Z", "url": "https://api.github.com/repos/rust-vmm/vm-device/issues/comments/511389328", "author_association": "MEMBER", "html_url": "https://github.com/rust-vmm/vm-device/pull/3#issuecomment-511389328", "created_at": "2019-07-15T12:52:21Z", "id": 511389328, "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTM4OTMyOA=="}]